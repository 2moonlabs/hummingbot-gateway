{
  "openapi": "3.0.3",
  "info": {
    "title": "Hummingbot Gateway",
    "description": "API endpoints for interacting with DEXs and blockchains",
    "version": "dev-2.8.0"
  },
  "components": {
    "parameters": { "queryExample": { "in": "query", "name": "example", "schema": { "type": "object" } } },
    "schemas": {}
  },
  "paths": {
    "/config/": {
      "get": {
        "tags": ["/config"],
        "description": "Get configuration settings. Returns all configurations if no parameters are specified. Use namespace to get a specific config (e.g., server, ethereum-mainnet, solana-mainnet-beta, uniswap).",
        "parameters": [
          {
            "schema": { "type": "string" },
            "examples": {
              "server": { "value": "server" },
              "ethereum-mainnet": { "value": "ethereum-mainnet" },
              "solana-mainnet-beta": { "value": "solana-mainnet-beta" },
              "uniswap": { "value": "uniswap" }
            },
            "in": "query",
            "name": "namespace",
            "required": false,
            "description": "Optional configuration namespace (e.g., \"server\", \"ethereum-mainnet\", \"solana-mainnet-beta\", \"uniswap\")"
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": { "application/json": { "schema": { "type": "object", "additionalProperties": true } } }
          }
        }
      }
    },
    "/config/update": {
      "post": {
        "tags": ["/config"],
        "description": "Update a specific configuration value",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "namespace": {
                    "description": "Configuration namespace (e.g., \"server\", \"ethereum-mainnet\", \"solana-mainnet-beta\", \"uniswap\")",
                    "type": "string",
                    "example": "server"
                  },
                  "path": {
                    "description": "Configuration path within the namespace (e.g., \"nodeURL\", \"manualGasPrice\")",
                    "type": "string",
                    "example": "nodeURL"
                  },
                  "value": {
                    "description": "Configuration value",
                    "anyOf": [
                      { "type": "string" },
                      { "type": "number" },
                      { "type": "boolean" },
                      { "type": "object", "properties": {} },
                      { "type": "array", "items": {} }
                    ]
                  }
                },
                "required": ["namespace", "path", "value"]
              },
              "examples": {
                "example1": { "value": { "namespace": "solana-mainnet-beta", "path": "maxFee", "value": 0.01 } },
                "example2": {
                  "value": {
                    "namespace": "ethereum-mainnet",
                    "path": "nodeURL",
                    "value": "https://eth-mainnet.g.alchemy.com/v2/your-api-key"
                  }
                },
                "example3": {
                  "value": { "namespace": "ethereum-mainnet", "path": "gasLimitTransaction", "value": 3000000 }
                },
                "example4": { "value": { "namespace": "solana-devnet", "path": "retryCount", "value": 5 } },
                "example5": { "value": { "namespace": "server", "path": "port", "value": 15888 } }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "message": { "description": "Status message", "type": "string" } },
                  "required": ["message"]
                }
              }
            }
          }
        }
      }
    },
    "/config/chains": {
      "get": {
        "tags": ["/config"],
        "description": "Returns a list of available blockchain networks supported by Gateway.",
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "chains": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "chain": { "type": "string" },
                          "networks": { "type": "array", "items": { "type": "string" } }
                        },
                        "required": ["chain", "networks"]
                      }
                    }
                  },
                  "required": ["chains"]
                }
              }
            }
          }
        }
      }
    },
    "/config/connectors": {
      "get": {
        "tags": ["/config"],
        "description": "Returns a list of available DEX connectors and their supported blockchain networks.",
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "connectors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": { "type": "string" },
                          "trading_types": { "type": "array", "items": { "type": "string" } },
                          "chain": { "type": "string" },
                          "networks": { "type": "array", "items": { "type": "string" } }
                        },
                        "required": ["name", "trading_types", "chain", "networks"]
                      }
                    }
                  },
                  "required": ["connectors"]
                }
              }
            }
          }
        }
      }
    },
    "/config/namespaces": {
      "get": {
        "tags": ["/config"],
        "description": "Returns a list of all configuration namespaces available in Gateway.",
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "namespaces": { "type": "array", "items": { "type": "string" } } },
                  "required": ["namespaces"]
                }
              }
            }
          }
        }
      }
    },
    "/wallet/": {
      "get": {
        "tags": ["/wallet"],
        "description": "Get all wallets across different chains",
        "parameters": [
          { "schema": { "default": true, "type": "boolean" }, "in": "query", "name": "showHardware", "required": false }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "chain": { "description": "Blockchain name", "type": "string", "example": "solana" },
                      "walletAddresses": {
                        "description": "List of regular wallet addresses with private keys",
                        "type": "array",
                        "items": {
                          "description": "Wallet address (Ethereum format: 0x... or Solana format: base58)",
                          "type": "string"
                        }
                      },
                      "hardwareWalletAddresses": {
                        "description": "List of hardware wallet addresses (Ledger)",
                        "type": "array",
                        "items": {
                          "description": "Wallet address (Ethereum format: 0x... or Solana format: base58)",
                          "type": "string"
                        }
                      }
                    },
                    "required": ["chain", "walletAddresses"]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wallet/add": {
      "post": {
        "tags": ["/wallet"],
        "description": "Add a new wallet using a private key",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "chain": {
                    "description": "Blockchain to add wallet to",
                    "enum": ["ethereum", "solana"],
                    "type": "string",
                    "example": "solana"
                  },
                  "privateKey": {
                    "description": "Private key for the wallet",
                    "type": "string",
                    "example": "<your-private-key>"
                  },
                  "setDefault": {
                    "description": "Set this wallet as the default for the chain",
                    "default": false,
                    "type": "boolean"
                  }
                },
                "required": ["chain", "privateKey"]
              },
              "example": { "chain": "solana", "privateKey": "<your-private-key>", "setDefault": true }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "address": { "description": "The wallet address that was added", "type": "string" } },
                  "required": ["address"]
                }
              }
            }
          }
        }
      }
    },
    "/wallet/add-hardware": {
      "post": {
        "tags": ["/wallet"],
        "description": "Add a hardware wallet",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "chain": {
                    "description": "Blockchain for hardware wallet",
                    "enum": ["ethereum", "solana"],
                    "default": "solana",
                    "type": "string",
                    "example": "solana"
                  },
                  "address": {
                    "description": "Hardware wallet address to add (must exist on connected Ledger device)",
                    "type": "string"
                  },
                  "setDefault": {
                    "description": "Set this wallet as the default for the chain",
                    "default": false,
                    "type": "boolean"
                  }
                },
                "required": ["chain", "address"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "address": { "description": "The hardware wallet address that was added", "type": "string" },
                    "publicKey": { "description": "Public key of the hardware wallet", "type": "string" },
                    "derivationPath": { "description": "BIP32/BIP44 derivation path used", "type": "string" },
                    "message": { "description": "Success message", "type": "string" }
                  },
                  "required": ["address", "publicKey", "derivationPath", "message"]
                }
              }
            }
          }
        }
      }
    },
    "/wallet/remove": {
      "delete": {
        "tags": ["/wallet"],
        "description": "Remove a wallet by its address (automatically detects wallet type)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "chain": {
                    "description": "Blockchain to remove wallet from",
                    "enum": ["ethereum", "solana"],
                    "type": "string",
                    "example": "solana"
                  },
                  "address": { "description": "Wallet address to remove", "type": "string" }
                },
                "required": ["chain", "address"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "description": "Success message indicating wallet type removed", "type": "string" }
                  },
                  "required": ["message"]
                }
              }
            }
          }
        }
      }
    },
    "/wallet/setDefault": {
      "post": {
        "tags": ["/wallet"],
        "description": "Set a wallet as default for a specific chain",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "chain": {
                    "description": "Blockchain to set default wallet for",
                    "enum": ["ethereum", "solana"],
                    "type": "string",
                    "example": "solana"
                  },
                  "address": { "description": "Wallet address to set as default", "type": "string" }
                },
                "required": ["chain", "address"]
              },
              "examples": {
                "example1": {
                  "value": { "chain": "ethereum", "address": "0x742d35Cc6634C0532925a3b844Bc9e7595f2BDf8" }
                },
                "example2": {
                  "value": { "chain": "solana", "address": "7UX2i7SucgLMQcfZ75s3VXmZZY4YRUyJN9X1RgfMoDUi" }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "description": "Success message", "type": "string" },
                    "chain": { "description": "Chain name", "type": "string" },
                    "address": { "description": "Default wallet address", "type": "string" }
                  },
                  "required": ["message", "chain", "address"]
                }
              }
            }
          }
        }
      }
    },
    "/tokens/": {
      "get": {
        "tags": ["/tokens"],
        "description": "List tokens from token lists with optional filtering",
        "parameters": [
          {
            "schema": { "type": "string" },
            "examples": { "ethereum": { "value": "ethereum" }, "solana": { "value": "solana" } },
            "in": "query",
            "name": "chain",
            "required": false,
            "description": "Blockchain network (e.g., ethereum, solana)"
          },
          {
            "schema": { "type": "string" },
            "examples": {
              "mainnet": { "value": "mainnet" },
              "mainnet-beta": { "value": "mainnet-beta" },
              "devnet": { "value": "devnet" }
            },
            "in": "query",
            "name": "network",
            "required": false,
            "description": "Network name (e.g., mainnet, mainnet-beta)"
          },
          {
            "schema": { "type": "string" },
            "examples": { "USDC": { "value": "USDC" }, "USD": { "value": "USD" } },
            "in": "query",
            "name": "search",
            "required": false,
            "description": "Search term for filtering tokens by symbol or name"
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "tokens": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "The full name of the token",
                            "type": "string",
                            "example": "USD Coin"
                          },
                          "symbol": { "description": "The token symbol", "type": "string", "example": "USDC" },
                          "address": {
                            "description": "The token contract address",
                            "type": "string",
                            "example": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
                          },
                          "decimals": {
                            "description": "The number of decimals the token uses",
                            "minimum": 0,
                            "maximum": 255,
                            "type": "number",
                            "example": 6
                          }
                        },
                        "required": ["name", "symbol", "address", "decimals"]
                      }
                    }
                  },
                  "required": ["tokens"]
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["/tokens"],
        "description": "Add a new token to a token list",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "chain": {
                    "description": "Blockchain network (e.g., ethereum, solana)",
                    "type": "string",
                    "example": "ethereum"
                  },
                  "network": {
                    "description": "Network name (e.g., mainnet, mainnet-beta)",
                    "type": "string",
                    "example": "mainnet"
                  },
                  "token": {
                    "type": "object",
                    "properties": {
                      "name": { "description": "The full name of the token", "type": "string", "example": "USD Coin" },
                      "symbol": { "description": "The token symbol", "type": "string", "example": "USDC" },
                      "address": {
                        "description": "The token contract address",
                        "type": "string",
                        "example": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
                      },
                      "decimals": {
                        "description": "The number of decimals the token uses",
                        "minimum": 0,
                        "maximum": 255,
                        "type": "number",
                        "example": 6
                      }
                    },
                    "required": ["name", "symbol", "address", "decimals"]
                  }
                },
                "required": ["chain", "network", "token"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "description": "Success message", "type": "string" },
                    "requiresRestart": {
                      "description": "Whether gateway restart is required",
                      "default": true,
                      "type": "boolean"
                    }
                  },
                  "required": ["message", "requiresRestart"]
                }
              }
            }
          }
        }
      }
    },
    "/tokens/{symbolOrAddress}": {
      "get": {
        "tags": ["/tokens"],
        "description": "Get a specific token by symbol or address",
        "parameters": [
          {
            "schema": { "type": "string" },
            "examples": { "ethereum": { "value": "ethereum" }, "solana": { "value": "solana" } },
            "in": "query",
            "name": "chain",
            "required": true,
            "description": "Blockchain network (e.g., ethereum, solana)"
          },
          {
            "schema": { "type": "string" },
            "examples": {
              "mainnet": { "value": "mainnet" },
              "mainnet-beta": { "value": "mainnet-beta" },
              "devnet": { "value": "devnet" }
            },
            "in": "query",
            "name": "network",
            "required": true,
            "description": "Network name (e.g., mainnet, mainnet-beta)"
          },
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "symbolOrAddress",
            "required": true,
            "description": "Token symbol or address"
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "The full name of the token",
                          "type": "string",
                          "example": "USD Coin"
                        },
                        "symbol": { "description": "The token symbol", "type": "string", "example": "USDC" },
                        "address": {
                          "description": "The token contract address",
                          "type": "string",
                          "example": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
                        },
                        "decimals": {
                          "description": "The number of decimals the token uses",
                          "minimum": 0,
                          "maximum": 255,
                          "type": "number",
                          "example": 6
                        }
                      },
                      "required": ["name", "symbol", "address", "decimals"]
                    },
                    "chain": { "type": "string" },
                    "network": { "type": "string" }
                  },
                  "required": ["token", "chain", "network"]
                }
              }
            }
          }
        }
      }
    },
    "/tokens/{address}": {
      "delete": {
        "tags": ["/tokens"],
        "description": "Remove a token from a token list by address",
        "parameters": [
          {
            "schema": { "type": "string" },
            "examples": { "ethereum": { "value": "ethereum" }, "solana": { "value": "solana" } },
            "in": "query",
            "name": "chain",
            "required": true,
            "description": "Blockchain network (e.g., ethereum, solana)"
          },
          {
            "schema": { "type": "string" },
            "examples": {
              "mainnet": { "value": "mainnet" },
              "mainnet-beta": { "value": "mainnet-beta" },
              "devnet": { "value": "devnet" }
            },
            "in": "query",
            "name": "network",
            "required": true,
            "description": "Network name (e.g., mainnet, mainnet-beta)"
          },
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "address",
            "required": true,
            "description": "Token address to remove"
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "description": "Success message", "type": "string" },
                    "requiresRestart": {
                      "description": "Whether gateway restart is required",
                      "default": true,
                      "type": "boolean"
                    }
                  },
                  "required": ["message", "requiresRestart"]
                }
              }
            }
          }
        }
      }
    },
    "/pools/": {
      "get": {
        "tags": ["/pools"],
        "description": "List all pools for a connector, optionally filtered by network, type, or search term",
        "parameters": [
          {
            "schema": { "type": "string" },
            "examples": {
              "raydium": { "value": "raydium" },
              "meteora": { "value": "meteora" },
              "uniswap": { "value": "uniswap" }
            },
            "in": "query",
            "name": "connector",
            "required": true,
            "description": "Connector (raydium, meteora, uniswap)"
          },
          {
            "schema": { "type": "string" },
            "examples": {
              "mainnet": { "value": "mainnet" },
              "mainnet-beta": { "value": "mainnet-beta" },
              "base": { "value": "base" }
            },
            "in": "query",
            "name": "network",
            "required": false,
            "description": "Optional: filter by network (mainnet, mainnet-beta, etc)"
          },
          {
            "schema": {
              "anyOf": [
                { "type": "string", "enum": ["amm"] },
                { "type": "string", "enum": ["clmm"] }
              ]
            },
            "in": "query",
            "name": "type",
            "required": false,
            "description": "Optional: filter by pool type"
          },
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "search",
            "required": false,
            "description": "Optional: search by token symbol or address"
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "anyOf": [
                          { "type": "string", "enum": ["amm"] },
                          { "type": "string", "enum": ["clmm"] }
                        ]
                      },
                      "network": { "type": "string" },
                      "baseSymbol": { "type": "string" },
                      "quoteSymbol": { "type": "string" },
                      "address": { "type": "string" }
                    },
                    "required": ["type", "network", "baseSymbol", "quoteSymbol", "address"]
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["/pools"],
        "description": "Add a new pool",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "connector": {
                    "description": "Connector (raydium, meteora, uniswap)",
                    "type": "string",
                    "example": "raydium"
                  },
                  "type": {
                    "description": "Pool type",
                    "anyOf": [
                      { "type": "string", "enum": ["amm"] },
                      { "type": "string", "enum": ["clmm"] }
                    ]
                  },
                  "network": {
                    "description": "Network name (mainnet, mainnet-beta, etc)",
                    "type": "string",
                    "example": "mainnet"
                  },
                  "baseSymbol": { "description": "Base token symbol", "type": "string", "example": "ETH" },
                  "quoteSymbol": { "description": "Quote token symbol", "type": "string", "example": "USDC" },
                  "address": { "description": "Pool contract address", "type": "string" }
                },
                "required": ["connector", "type", "network", "baseSymbol", "quoteSymbol", "address"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "message": { "type": "string" } },
                  "required": ["message"]
                }
              }
            }
          },
          "400": {
            "description": "Default Response",
            "content": {
              "application/json": { "schema": { "type": "object", "properties": { "message": { "type": "string" } } } }
            }
          }
        }
      }
    },
    "/pools/{tradingPair}": {
      "get": {
        "tags": ["/pools"],
        "description": "Get a specific pool by trading pair",
        "parameters": [
          {
            "schema": { "type": "string" },
            "examples": {
              "raydium": { "value": "raydium" },
              "meteora": { "value": "meteora" },
              "uniswap": { "value": "uniswap" }
            },
            "in": "query",
            "name": "connector",
            "required": true,
            "description": "Connector (raydium, meteora, uniswap)"
          },
          {
            "schema": { "type": "string" },
            "examples": { "mainnet": { "value": "mainnet" }, "mainnet-beta": { "value": "mainnet-beta" } },
            "in": "query",
            "name": "network",
            "required": true,
            "description": "Network name (mainnet, mainnet-beta, etc)"
          },
          {
            "schema": {
              "anyOf": [
                { "type": "string", "enum": ["amm"] },
                { "type": "string", "enum": ["clmm"] }
              ]
            },
            "in": "query",
            "name": "type",
            "required": true,
            "description": "Pool type"
          },
          {
            "schema": { "type": "string" },
            "examples": { "ETH-USDC": { "value": "ETH-USDC" }, "SOL-USDC": { "value": "SOL-USDC" } },
            "in": "path",
            "name": "tradingPair",
            "required": true,
            "description": "Trading pair (e.g., ETH-USDC, SOL-USDC)"
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "anyOf": [
                        { "type": "string", "enum": ["amm"] },
                        { "type": "string", "enum": ["clmm"] }
                      ]
                    },
                    "network": { "type": "string" },
                    "baseSymbol": { "type": "string" },
                    "quoteSymbol": { "type": "string" },
                    "address": { "type": "string" }
                  },
                  "required": ["type", "network", "baseSymbol", "quoteSymbol", "address"]
                }
              }
            }
          },
          "404": {
            "description": "Default Response",
            "content": {
              "application/json": { "schema": { "type": "object", "properties": { "message": { "type": "string" } } } }
            }
          }
        }
      }
    },
    "/pools/{address}": {
      "delete": {
        "tags": ["/pools"],
        "description": "Remove a pool by address",
        "parameters": [
          {
            "schema": { "type": "string" },
            "examples": {
              "raydium": { "value": "raydium" },
              "meteora": { "value": "meteora" },
              "uniswap": { "value": "uniswap" }
            },
            "in": "query",
            "name": "connector",
            "required": true,
            "description": "Connector (raydium, meteora, uniswap)"
          },
          {
            "schema": { "type": "string" },
            "examples": { "mainnet": { "value": "mainnet" }, "mainnet-beta": { "value": "mainnet-beta" } },
            "in": "query",
            "name": "network",
            "required": true,
            "description": "Network name (mainnet, mainnet-beta, etc)"
          },
          {
            "schema": {
              "anyOf": [
                { "type": "string", "enum": ["amm"] },
                { "type": "string", "enum": ["clmm"] }
              ]
            },
            "in": "query",
            "name": "type",
            "required": true,
            "description": "Pool type"
          },
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "address",
            "required": true,
            "description": "Pool contract address to remove"
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "message": { "type": "string" } },
                  "required": ["message"]
                }
              }
            }
          },
          "404": {
            "description": "Default Response",
            "content": {
              "application/json": { "schema": { "type": "object", "properties": { "message": { "type": "string" } } } }
            }
          }
        }
      }
    },
    "/chains/solana/status": {
      "get": {
        "tags": ["/chain/solana"],
        "description": "Get Solana network status",
        "parameters": [
          {
            "schema": { "type": "string" },
            "examples": { "mainnet-beta": { "value": "mainnet-beta" }, "devnet": { "value": "devnet" } },
            "in": "query",
            "name": "network",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "chain": { "type": "string" },
                    "network": { "type": "string" },
                    "rpcUrl": { "type": "string" },
                    "currentBlockNumber": { "type": "number" },
                    "nativeCurrency": { "type": "string" }
                  },
                  "required": ["chain", "network", "rpcUrl", "currentBlockNumber", "nativeCurrency"]
                }
              }
            }
          }
        }
      }
    },
    "/chains/solana/balances": {
      "post": {
        "tags": ["/chain/solana"],
        "description": "Get token balances for a Solana address. If no tokens specified or empty array provided, returns non-zero balances for tokens from the token list that are found in the wallet (includes SOL even if zero). If specific tokens are requested, returns those exact tokens with their balances, including zeros.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "network": { "type": "string", "example": "mainnet-beta" },
                  "address": { "type": "string", "example": "11111111111111111111111111111111" },
                  "tokens": {
                    "type": "array",
                    "items": { "type": "string" },
                    "description": "A list of token symbols (SOL, USDC, BONK) or token mint addresses. Both formats are accepted and will be automatically detected. An empty array is treated the same as if the parameter was not provided, returning only non-zero balances (with the exception of SOL).",
                    "example": ["SOL", "USDC", "BONK"]
                  },
                  "fetchAll": {
                    "type": "boolean",
                    "description": "Whether to fetch all tokens in wallet, not just those in token list. Defaults to false.",
                    "default": false,
                    "example": false
                  }
                },
                "required": ["network", "address"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Token balances for the specified address",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "balances": { "type": "object", "additionalProperties": { "type": "number" } } },
                  "required": ["balances"],
                  "description": "Token balances for the specified address"
                },
                "examples": {
                  "example1": { "value": { "balances": { "SOL": 1.5, "USDC": 100, "BONK": 50000 } } },
                  "example2": {
                    "value": {
                      "balances": { "SOL": 1.5, "USDC": 100, "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v": 25 }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/chains/solana/poll": {
      "post": {
        "tags": ["/chain/solana"],
        "description": "Poll for the status of a Solana transaction",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "network": { "type": "string", "example": "mainnet-beta" },
                  "signature": {
                    "type": "string",
                    "example": "55ukR6VCt1sQFMC8Nyeo51R1SMaTzUC7jikmkEJ2jjkQNdqBxXHraH7vaoaNmf8rX4Y55EXAj8XXoyzvvsrQqWZa"
                  },
                  "tokens": { "type": "array", "items": { "type": "string" }, "example": ["SOL", "USDC"] },
                  "walletAddress": { "type": "string", "example": "11111111111111111111111111111111" }
                },
                "required": ["network", "signature"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "currentBlock": { "type": "number" },
                    "signature": { "type": "string" },
                    "txBlock": { "anyOf": [{ "type": "number" }, { "type": "null" }] },
                    "txStatus": { "type": "number" },
                    "fee": { "anyOf": [{ "type": "number" }, { "type": "null" }] },
                    "tokenBalanceChanges": {
                      "description": "Dictionary of token balance changes keyed by token input value (symbol or address)",
                      "type": "object",
                      "additionalProperties": { "type": "number" }
                    },
                    "txData": { "anyOf": [{ "type": "object", "additionalProperties": {} }, { "type": "null" }] },
                    "error": { "type": "string" }
                  },
                  "required": ["currentBlock", "signature", "txBlock", "txStatus", "fee", "txData"]
                }
              }
            }
          }
        }
      }
    },
    "/chains/solana/estimate-gas": {
      "post": {
        "tags": ["/chain/solana"],
        "description": "Estimate gas prices for Solana transactions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "network": { "type": "string", "example": "mainnet-beta" },
                  "gasLimit": { "type": "number", "example": 200000 }
                },
                "required": ["network"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "feePerComputeUnit": { "type": "number" },
                    "denomination": { "type": "string" },
                    "timestamp": { "type": "number" }
                  },
                  "required": ["feePerComputeUnit", "denomination", "timestamp"]
                }
              }
            }
          }
        }
      }
    },
    "/chains/ethereum/status": {
      "get": {
        "tags": ["/chain/ethereum"],
        "description": "Get Ethereum chain status",
        "parameters": [
          {
            "schema": { "type": "string" },
            "examples": {
              "mainnet": { "value": "mainnet" },
              "arbitrum": { "value": "arbitrum" },
              "optimism": { "value": "optimism" },
              "base": { "value": "base" },
              "sepolia": { "value": "sepolia" },
              "bsc": { "value": "bsc" },
              "avalanche": { "value": "avalanche" },
              "celo": { "value": "celo" },
              "polygon": { "value": "polygon" }
            },
            "in": "query",
            "name": "network",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "chain": { "type": "string" },
                    "network": { "type": "string" },
                    "rpcUrl": { "type": "string" },
                    "currentBlockNumber": { "type": "number" },
                    "nativeCurrency": { "type": "string" }
                  },
                  "required": ["chain", "network", "rpcUrl", "currentBlockNumber", "nativeCurrency"]
                }
              }
            }
          }
        }
      }
    },
    "/chains/ethereum/balances": {
      "post": {
        "tags": ["/chain/ethereum"],
        "description": "Get Ethereum balances. If no tokens specified or empty array provided, returns native token (ETH) and only non-zero balances for tokens from the token list. If specific tokens are requested, returns those exact tokens with their balances, including zeros.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "network": { "type": "string", "example": "mainnet" },
                  "address": { "type": "string", "example": "0x0000000000000000000000000000000000000000" },
                  "tokens": {
                    "type": "array",
                    "items": { "type": "string" },
                    "description": "A list of token symbols or addresses. An empty array is treated the same as if the parameter was not provided, returning only non-zero balances plus the native token.",
                    "example": ["ETH", "USDC", "DAI", "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"]
                  },
                  "fetchAll": {
                    "description": "fetch all tokens in wallet, not just those in token list (default: false)",
                    "type": "boolean"
                  }
                },
                "required": ["network", "address"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "balances": { "type": "object", "additionalProperties": { "type": "number" } } },
                  "required": ["balances"]
                }
              }
            }
          }
        }
      }
    },
    "/chains/ethereum/poll": {
      "post": {
        "tags": ["/chain/ethereum"],
        "description": "Poll Ethereum transaction status",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "network": { "type": "string", "example": "mainnet" },
                  "signature": { "type": "string", "example": "0x123..." },
                  "tokens": {
                    "description": "Array of token symbols or addresses for balance change calculation",
                    "type": "array",
                    "items": { "type": "string" }
                  },
                  "walletAddress": {
                    "description": "Wallet address for balance change calculation (required if tokens provided)",
                    "type": "string"
                  }
                },
                "required": ["network", "signature"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "currentBlock": { "type": "number" },
                    "signature": { "type": "string" },
                    "txBlock": { "anyOf": [{ "type": "number" }, { "type": "null" }] },
                    "txStatus": { "type": "number" },
                    "fee": { "anyOf": [{ "type": "number" }, { "type": "null" }] },
                    "tokenBalanceChanges": {
                      "description": "Dictionary of token balance changes keyed by token input value (symbol or address)",
                      "type": "object",
                      "additionalProperties": { "type": "number" }
                    },
                    "txData": { "anyOf": [{ "type": "object", "additionalProperties": {} }, { "type": "null" }] },
                    "error": { "type": "string" }
                  },
                  "required": ["currentBlock", "signature", "txBlock", "txStatus", "fee", "txData"]
                }
              }
            }
          }
        }
      }
    },
    "/chains/ethereum/allowances": {
      "post": {
        "tags": ["/chain/ethereum"],
        "description": "Get token allowances",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "network": { "type": "string", "example": "mainnet" },
                  "address": { "type": "string", "example": "0x0000000000000000000000000000000000000000" },
                  "spender": {
                    "description": "Spender can be a connector name (e.g., uniswap/clmm, uniswap/amm, uniswap) or a direct contract address",
                    "type": "string",
                    "example": "uniswap/clmm"
                  },
                  "tokens": {
                    "description": "Array of token symbols or addresses",
                    "type": "array",
                    "items": { "type": "string" },
                    "example": ["USDC", "DAI"]
                  }
                },
                "required": ["network", "address", "spender", "tokens"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "spender": { "type": "string" },
                    "approvals": { "type": "object", "additionalProperties": { "type": "string" } }
                  },
                  "required": ["spender", "approvals"]
                }
              }
            }
          }
        }
      }
    },
    "/chains/ethereum/approve": {
      "post": {
        "tags": ["/chain/ethereum"],
        "description": "Approve token spending",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "network": { "type": "string", "example": "mainnet" },
                  "address": { "type": "string", "example": "0x0000000000000000000000000000000000000000" },
                  "spender": {
                    "description": "Spender can be a connector name (e.g., uniswap/clmm, uniswap/amm, uniswap) or a direct contract address",
                    "type": "string",
                    "example": "uniswap/clmm"
                  },
                  "token": { "type": "string", "example": "USDC" },
                  "amount": {
                    "description": "The amount to approve. If not provided, defaults to maximum amount (unlimited approval).",
                    "type": "string",
                    "example": ""
                  }
                },
                "required": ["network", "address", "spender", "token"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "signature": { "type": "string" },
                    "status": { "description": "TransactionStatus enum value", "type": "number" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "tokenAddress": { "type": "string" },
                        "spender": { "type": "string" },
                        "amount": { "type": "string" },
                        "nonce": { "type": "number" },
                        "fee": { "type": "string" }
                      },
                      "required": ["tokenAddress", "spender", "amount", "nonce", "fee"]
                    }
                  },
                  "required": ["signature", "status"]
                }
              }
            }
          }
        }
      }
    },
    "/chains/ethereum/estimate-gas": {
      "post": {
        "tags": ["/chain/ethereum"],
        "description": "Estimate gas prices for Ethereum transactions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "network": { "type": "string", "example": "mainnet" },
                  "gasLimit": { "type": "number", "example": 21000 }
                },
                "required": ["network"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "feePerComputeUnit": { "type": "number" },
                    "denomination": { "type": "string" },
                    "timestamp": { "type": "number" }
                  },
                  "required": ["feePerComputeUnit", "denomination", "timestamp"]
                }
              }
            }
          }
        }
      }
    },
    "/chains/ethereum/wrap": {
      "post": {
        "tags": ["/chain/ethereum"],
        "description": "Wrap native token to wrapped token (e.g., ETH to WETH, BNB to WBNB)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "network": { "type": "string", "example": "mainnet" },
                  "address": { "type": "string", "example": "0x0000000000000000000000000000000000000000" },
                  "amount": {
                    "description": "The amount of native token to wrap (e.g., ETH, BNB, AVAX)",
                    "type": "string",
                    "example": "0.01"
                  }
                },
                "required": ["network", "address", "amount"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "signature": { "type": "string" },
                    "status": { "description": "TransactionStatus enum value", "type": "number" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "nonce": { "type": "number" },
                        "fee": { "type": "string" },
                        "amount": { "type": "string" },
                        "wrappedAddress": { "type": "string" },
                        "nativeToken": { "type": "string" },
                        "wrappedToken": { "type": "string" }
                      },
                      "required": ["nonce", "fee", "amount", "wrappedAddress", "nativeToken", "wrappedToken"]
                    }
                  },
                  "required": ["signature", "status"]
                }
              }
            }
          }
        }
      }
    },
    "/connectors/jupiter/router/quote-swap": {
      "get": {
        "tags": ["/connector/jupiter"],
        "description": "Get an executable swap quote from Jupiter",
        "parameters": [
          {
            "schema": { "default": "mainnet-beta", "enum": ["mainnet-beta", "devnet"], "type": "string" },
            "examples": { "mainnet-beta": { "value": "mainnet-beta" }, "devnet": { "value": "devnet" } },
            "in": "query",
            "name": "network",
            "required": false,
            "description": "Solana network to use"
          },
          {
            "schema": { "type": "string" },
            "example": "SOL",
            "in": "query",
            "name": "baseToken",
            "required": true,
            "description": "Solana token symbol or address to determine swap direction"
          },
          {
            "schema": { "type": "string" },
            "example": "USDC",
            "in": "query",
            "name": "quoteToken",
            "required": true,
            "description": "The other Solana token symbol or address in the pair"
          },
          {
            "schema": { "type": "number" },
            "example": 0.1,
            "in": "query",
            "name": "amount",
            "required": true,
            "description": "Amount of base token to trade"
          },
          {
            "schema": { "enum": ["BUY", "SELL"], "default": "SELL", "type": "string" },
            "in": "query",
            "name": "side",
            "required": true,
            "description": "Trade direction - BUY means buying base token with quote token, SELL means selling base token for quote token"
          },
          {
            "schema": { "minimum": 0, "maximum": 100, "type": "number" },
            "example": 1,
            "in": "query",
            "name": "slippagePct",
            "required": false,
            "description": "Maximum acceptable slippage percentage"
          },
          {
            "schema": { "default": true, "type": "boolean" },
            "example": true,
            "in": "query",
            "name": "restrictIntermediateTokens",
            "required": false,
            "description": "Restrict routing through highly liquid intermediate tokens only for better price and stability"
          },
          {
            "schema": { "default": false, "type": "boolean" },
            "example": false,
            "in": "query",
            "name": "onlyDirectRoutes",
            "required": false,
            "description": "Restrict routing to only go through 1 market"
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "quoteId": { "description": "Unique identifier for this quote", "type": "string" },
                    "tokenIn": { "description": "Address of the token being swapped from", "type": "string" },
                    "tokenOut": { "description": "Address of the token being swapped to", "type": "string" },
                    "amountIn": { "description": "Amount of tokenIn to be swapped", "type": "number" },
                    "amountOut": { "description": "Expected amount of tokenOut to receive", "type": "number" },
                    "price": { "description": "Exchange rate between tokenIn and tokenOut", "type": "number" },
                    "slippagePct": { "description": "Slippage percentage used for this quote", "type": "number" },
                    "priceWithSlippage": {
                      "description": "Price including slippage (worst acceptable price)",
                      "type": "number"
                    },
                    "minAmountOut": {
                      "description": "Minimum amount of tokenOut that will be accepted",
                      "type": "number"
                    },
                    "maxAmountIn": { "description": "Maximum amount of tokenIn that will be spent", "type": "number" },
                    "quoteResponse": {
                      "type": "object",
                      "properties": {
                        "inputMint": { "description": "Solana mint address of input token", "type": "string" },
                        "inAmount": { "description": "Input amount in token decimals", "type": "string" },
                        "outputMint": { "description": "Solana mint address of output token", "type": "string" },
                        "outAmount": { "description": "Expected output amount in token decimals", "type": "string" },
                        "otherAmountThreshold": {
                          "description": "Minimum output amount based on slippage",
                          "type": "string"
                        },
                        "swapMode": { "description": "Swap mode used (ExactIn or ExactOut)", "type": "string" },
                        "slippageBps": { "description": "Slippage in basis points", "type": "number" },
                        "platformFee": { "description": "Platform fee information if applicable" },
                        "priceImpactPct": { "description": "Estimated price impact percentage", "type": "string" },
                        "routePlan": {
                          "description": "Detailed routing plan through various markets",
                          "type": "array",
                          "items": {}
                        },
                        "contextSlot": { "description": "Solana slot used for quote calculation", "type": "number" },
                        "timeTaken": { "description": "Time taken to generate quote in milliseconds", "type": "number" }
                      },
                      "required": [
                        "inputMint",
                        "inAmount",
                        "outputMint",
                        "outAmount",
                        "otherAmountThreshold",
                        "swapMode",
                        "slippageBps",
                        "priceImpactPct",
                        "routePlan"
                      ]
                    }
                  },
                  "required": [
                    "quoteId",
                    "tokenIn",
                    "tokenOut",
                    "amountIn",
                    "amountOut",
                    "price",
                    "slippagePct",
                    "priceWithSlippage",
                    "minAmountOut",
                    "maxAmountIn",
                    "quoteResponse"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/connectors/jupiter/router/execute-quote": {
      "post": {
        "tags": ["/connector/jupiter"],
        "description": "Execute a previously fetched quote from Jupiter",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "walletAddress": {
                    "description": "Solana wallet address that will execute the swap",
                    "default": "11111111111111111111111111111111",
                    "type": "string",
                    "example": "11111111111111111111111111111111"
                  },
                  "network": {
                    "description": "Solana network to use",
                    "default": "mainnet-beta",
                    "enum": ["mainnet-beta", "devnet"],
                    "type": "string",
                    "example": "mainnet-beta"
                  },
                  "quoteId": {
                    "description": "ID of the Jupiter quote to execute",
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                  },
                  "priorityLevel": {
                    "description": "Priority level for Solana transaction processing",
                    "enum": ["medium", "high", "veryHigh"],
                    "default": "veryHigh",
                    "type": "string"
                  },
                  "maxLamports": {
                    "description": "Maximum priority fee in lamports for Solana transaction",
                    "type": "number",
                    "example": 1000000
                  }
                },
                "required": ["quoteId"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "signature": { "description": "Transaction signature/hash", "type": "string" },
                    "status": {
                      "description": "Transaction status: 0 = PENDING, 1 = CONFIRMED, -1 = FAILED",
                      "type": "number"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "tokenIn": { "description": "Address of the token swapped from", "type": "string" },
                        "tokenOut": { "description": "Address of the token swapped to", "type": "string" },
                        "amountIn": { "description": "Actual amount of tokenIn swapped", "type": "number" },
                        "amountOut": { "description": "Actual amount of tokenOut received", "type": "number" },
                        "fee": { "description": "Transaction fee paid", "type": "number" },
                        "baseTokenBalanceChange": {
                          "description": "Change in base token balance (negative for decrease)",
                          "type": "number"
                        },
                        "quoteTokenBalanceChange": {
                          "description": "Change in quote token balance (negative for decrease)",
                          "type": "number"
                        }
                      },
                      "required": [
                        "tokenIn",
                        "tokenOut",
                        "amountIn",
                        "amountOut",
                        "fee",
                        "baseTokenBalanceChange",
                        "quoteTokenBalanceChange"
                      ]
                    }
                  },
                  "required": ["signature", "status"]
                }
              }
            }
          }
        }
      }
    },
    "/connectors/jupiter/router/execute-swap": {
      "post": {
        "tags": ["/connector/jupiter"],
        "description": "Quote and execute a token swap on Jupiter in one step",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "walletAddress": {
                    "description": "Solana wallet address that will execute the swap",
                    "default": "11111111111111111111111111111111",
                    "type": "string",
                    "example": "11111111111111111111111111111111"
                  },
                  "network": {
                    "description": "Solana network to use",
                    "default": "mainnet-beta",
                    "enum": ["mainnet-beta", "devnet"],
                    "type": "string",
                    "example": "mainnet-beta"
                  },
                  "baseToken": {
                    "description": "Solana token symbol or address to determine swap direction",
                    "type": "string",
                    "example": "SOL"
                  },
                  "quoteToken": {
                    "description": "The other Solana token symbol or address in the pair",
                    "type": "string",
                    "example": "USDC"
                  },
                  "amount": { "description": "Amount of base token to trade", "type": "number", "example": 0.1 },
                  "side": {
                    "description": "Trade direction - BUY means buying base token with quote token, SELL means selling base token for quote token",
                    "enum": ["BUY", "SELL"],
                    "default": "SELL",
                    "type": "string"
                  },
                  "slippagePct": {
                    "minimum": 0,
                    "maximum": 100,
                    "description": "Maximum acceptable slippage percentage",
                    "type": "number",
                    "example": 1
                  },
                  "restrictIntermediateTokens": {
                    "description": "Restrict routing through highly liquid intermediate tokens only for better price and stability",
                    "default": true,
                    "type": "boolean",
                    "example": true
                  },
                  "onlyDirectRoutes": {
                    "description": "Restrict routing to only go through 1 market",
                    "default": false,
                    "type": "boolean",
                    "example": false
                  },
                  "priorityLevel": {
                    "description": "Priority level for Solana transaction processing",
                    "enum": ["medium", "high", "veryHigh"],
                    "default": "veryHigh",
                    "type": "string"
                  },
                  "maxLamports": {
                    "description": "Maximum priority fee in lamports for Solana transaction",
                    "type": "number",
                    "example": 1000000
                  }
                },
                "required": ["baseToken", "quoteToken", "amount", "side"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "signature": { "description": "Transaction signature/hash", "type": "string" },
                    "status": {
                      "description": "Transaction status: 0 = PENDING, 1 = CONFIRMED, -1 = FAILED",
                      "type": "number"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "tokenIn": { "description": "Address of the token swapped from", "type": "string" },
                        "tokenOut": { "description": "Address of the token swapped to", "type": "string" },
                        "amountIn": { "description": "Actual amount of tokenIn swapped", "type": "number" },
                        "amountOut": { "description": "Actual amount of tokenOut received", "type": "number" },
                        "fee": { "description": "Transaction fee paid", "type": "number" },
                        "baseTokenBalanceChange": {
                          "description": "Change in base token balance (negative for decrease)",
                          "type": "number"
                        },
                        "quoteTokenBalanceChange": {
                          "description": "Change in quote token balance (negative for decrease)",
                          "type": "number"
                        }
                      },
                      "required": [
                        "tokenIn",
                        "tokenOut",
                        "amountIn",
                        "amountOut",
                        "fee",
                        "baseTokenBalanceChange",
                        "quoteTokenBalanceChange"
                      ]
                    }
                  },
                  "required": ["signature", "status"]
                }
              }
            }
          }
        }
      }
    },
    "/connectors/meteora/clmm/fetch-pools": {
      "get": {
        "tags": ["/connector/meteora"],
        "description": "Fetch info about Meteora pools",
        "parameters": [
          {
            "schema": { "type": "string", "default": "mainnet-beta" },
            "in": "query",
            "name": "network",
            "required": true
          },
          {
            "schema": { "type": "number", "minimum": 1, "default": 10 },
            "in": "query",
            "name": "limit",
            "required": false
          },
          { "schema": { "type": "string" }, "example": "SOL", "in": "query", "name": "tokenA", "required": false },
          { "schema": { "type": "string" }, "example": "USDC", "in": "query", "name": "tokenB", "required": false }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "address": { "type": "string" },
                      "baseTokenAddress": { "type": "string" },
                      "quoteTokenAddress": { "type": "string" },
                      "binStep": { "type": "number" },
                      "feePct": { "type": "number" },
                      "price": { "type": "number" },
                      "baseTokenAmount": { "type": "number" },
                      "quoteTokenAmount": { "type": "number" },
                      "activeBinId": { "type": "number" }
                    },
                    "required": [
                      "address",
                      "baseTokenAddress",
                      "quoteTokenAddress",
                      "binStep",
                      "feePct",
                      "price",
                      "baseTokenAmount",
                      "quoteTokenAmount",
                      "activeBinId"
                    ],
                    "title": "PoolInfo"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/connectors/meteora/clmm/pool-info": {
      "get": {
        "tags": ["/connector/meteora"],
        "description": "Get pool information for a Meteora pool",
        "parameters": [
          {
            "schema": { "type": "string" },
            "example": "mainnet-beta",
            "in": "query",
            "name": "network",
            "required": true
          },
          {
            "schema": { "type": "string" },
            "example": "2sf5NYcY4zUPXUSmG6f66mskb24t5F8S11pC1Nz5nQT3",
            "in": "query",
            "name": "poolAddress",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "address": { "type": "string" },
                    "baseTokenAddress": { "type": "string" },
                    "quoteTokenAddress": { "type": "string" },
                    "binStep": { "type": "number" },
                    "feePct": { "type": "number" },
                    "price": { "type": "number" },
                    "baseTokenAmount": { "type": "number" },
                    "quoteTokenAmount": { "type": "number" },
                    "activeBinId": { "type": "number" },
                    "dynamicFeePct": { "type": "number" },
                    "minBinId": { "type": "number" },
                    "maxBinId": { "type": "number" },
                    "bins": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "binId": { "type": "number" },
                          "price": { "type": "number" },
                          "baseTokenAmount": { "type": "number" },
                          "quoteTokenAmount": { "type": "number" }
                        },
                        "required": ["binId", "price", "baseTokenAmount", "quoteTokenAmount"],
                        "title": "BinLiquidity"
                      }
                    }
                  },
                  "required": [
                    "address",
                    "baseTokenAddress",
                    "quoteTokenAddress",
                    "binStep",
                    "feePct",
                    "price",
                    "baseTokenAmount",
                    "quoteTokenAmount",
                    "activeBinId",
                    "dynamicFeePct",
                    "minBinId",
                    "maxBinId",
                    "bins"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/connectors/meteora/clmm/positions-owned": {
      "get": {
        "tags": ["/connector/meteora"],
        "description": "Retrieve a list of positions owned by a user's wallet in a specific Meteora pool",
        "parameters": [
          {
            "schema": { "default": "mainnet-beta", "type": "string" },
            "in": "query",
            "name": "network",
            "required": false
          },
          {
            "schema": { "type": "string" },
            "example": "11111111111111111111111111111111",
            "in": "query",
            "name": "walletAddress",
            "required": true
          },
          {
            "schema": { "type": "string" },
            "example": "FtFUzuXbbw6oBbU53SDUGspEka1D5Xyc4cwnkxer6xKz",
            "in": "query",
            "name": "poolAddress",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "address": { "type": "string" },
                      "poolAddress": { "type": "string" },
                      "baseTokenAddress": { "type": "string" },
                      "quoteTokenAddress": { "type": "string" },
                      "baseTokenAmount": { "type": "number" },
                      "quoteTokenAmount": { "type": "number" },
                      "baseFeeAmount": { "type": "number" },
                      "quoteFeeAmount": { "type": "number" },
                      "lowerBinId": { "type": "number" },
                      "upperBinId": { "type": "number" },
                      "lowerPrice": { "type": "number" },
                      "upperPrice": { "type": "number" },
                      "price": { "type": "number" }
                    },
                    "required": [
                      "address",
                      "poolAddress",
                      "baseTokenAddress",
                      "quoteTokenAddress",
                      "baseTokenAmount",
                      "quoteTokenAmount",
                      "baseFeeAmount",
                      "quoteFeeAmount",
                      "lowerBinId",
                      "upperBinId",
                      "lowerPrice",
                      "upperPrice",
                      "price"
                    ],
                    "title": "PositionInfo"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/connectors/meteora/clmm/position-info": {
      "get": {
        "tags": ["/connector/meteora"],
        "description": "Get details for a specific Meteora position",
        "parameters": [
          {
            "schema": { "type": "string" },
            "example": "mainnet-beta",
            "in": "query",
            "name": "network",
            "required": true
          },
          {
            "schema": { "type": "string" },
            "example": "11111111111111111111111111111111",
            "in": "query",
            "name": "walletAddress",
            "required": true
          },
          { "schema": { "type": "string" }, "in": "query", "name": "positionAddress", "required": true }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "address": { "type": "string" },
                    "poolAddress": { "type": "string" },
                    "baseTokenAddress": { "type": "string" },
                    "quoteTokenAddress": { "type": "string" },
                    "baseTokenAmount": { "type": "number" },
                    "quoteTokenAmount": { "type": "number" },
                    "baseFeeAmount": { "type": "number" },
                    "quoteFeeAmount": { "type": "number" },
                    "lowerBinId": { "type": "number" },
                    "upperBinId": { "type": "number" },
                    "lowerPrice": { "type": "number" },
                    "upperPrice": { "type": "number" },
                    "price": { "type": "number" }
                  },
                  "required": [
                    "address",
                    "poolAddress",
                    "baseTokenAddress",
                    "quoteTokenAddress",
                    "baseTokenAmount",
                    "quoteTokenAmount",
                    "baseFeeAmount",
                    "quoteFeeAmount",
                    "lowerBinId",
                    "upperBinId",
                    "lowerPrice",
                    "upperPrice",
                    "price"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/connectors/meteora/clmm/quote-swap": {
      "get": {
        "tags": ["/connector/meteora"],
        "description": "Get swap quote for Meteora CLMM",
        "parameters": [
          { "schema": { "type": "string" }, "in": "query", "name": "network", "required": true },
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "poolAddress",
            "required": false,
            "description": "Pool address (optional - can be looked up from baseToken and quoteToken)"
          },
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "baseToken",
            "required": true,
            "description": "Token to determine swap direction"
          },
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "quoteToken",
            "required": false,
            "description": "The other token in the pair (optional - required if poolAddress not provided)"
          },
          { "schema": { "type": "number" }, "in": "query", "name": "amount", "required": true },
          {
            "schema": { "enum": ["BUY", "SELL"], "type": "string" },
            "in": "query",
            "name": "side",
            "required": true,
            "description": "Trade direction"
          },
          {
            "schema": { "minimum": 0, "maximum": 100, "type": "number" },
            "in": "query",
            "name": "slippagePct",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "quoteId": { "type": "string" },
                    "poolAddress": { "type": "string" },
                    "tokenIn": { "type": "string" },
                    "tokenOut": { "type": "string" },
                    "amountIn": { "type": "number" },
                    "amountOut": { "type": "number" },
                    "price": { "type": "number" },
                    "slippagePct": { "type": "number" },
                    "priceWithSlippage": {
                      "description": "Price including slippage (worst acceptable price)",
                      "type": "number"
                    },
                    "minAmountOut": { "type": "number" },
                    "maxAmountIn": { "type": "number" },
                    "priceImpactPct": { "type": "number" },
                    "fee": { "type": "number" },
                    "computeUnits": { "type": "number" },
                    "activeBinId": { "type": "number" }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/connectors/meteora/clmm/execute-swap": {
      "post": {
        "tags": ["/connector/meteora"],
        "description": "Execute a token swap on Meteora",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "walletAddress": { "type": "string" },
                      "network": { "type": "string" },
                      "poolAddress": {
                        "description": "Pool address (optional - can be looked up from baseToken and quoteToken)",
                        "type": "string"
                      },
                      "baseToken": { "type": "string" },
                      "quoteToken": {
                        "description": "The other token in the pair (optional - required if poolAddress not provided)",
                        "type": "string"
                      },
                      "amount": { "type": "number" },
                      "side": { "enum": ["BUY", "SELL"], "type": "string" },
                      "slippagePct": { "minimum": 0, "maximum": 100, "type": "number" },
                      "priorityFeePerCU": {
                        "description": "Priority fee per compute unit (lamports on Solana, Gwei on Ethereum)",
                        "type": "number"
                      },
                      "computeUnits": { "description": "Compute units for transaction", "type": "number" }
                    },
                    "required": ["walletAddress", "network", "baseToken", "amount", "side", "slippagePct"],
                    "title": "ClmmExecuteSwapRequest"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "priorityFeePerCU": { "description": "Priority fee per compute unit", "type": "number" },
                      "computeUnits": { "description": "Compute units for transaction", "type": "number" }
                    }
                  }
                ],
                "properties": {
                  "network": { "type": "string", "default": "mainnet-beta" },
                  "walletAddress": { "type": "string", "example": "11111111111111111111111111111111" },
                  "baseToken": { "type": "string", "example": "SOL" },
                  "quoteToken": { "type": "string", "example": "USDC" },
                  "amount": { "type": "number", "example": 0.01 },
                  "side": { "type": "string", "enum": ["BUY", "SELL"] },
                  "poolAddress": { "type": "string", "example": "" },
                  "slippagePct": { "type": "number", "example": 1 }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "signature": { "type": "string" },
                    "status": { "description": "TransactionStatus enum value", "type": "number" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "tokenIn": { "type": "string" },
                        "tokenOut": { "type": "string" },
                        "amountIn": { "type": "number" },
                        "amountOut": { "type": "number" },
                        "fee": { "type": "number" },
                        "baseTokenBalanceChange": { "type": "number" },
                        "quoteTokenBalanceChange": { "type": "number" },
                        "activeBinId": { "type": "number" }
                      },
                      "required": [
                        "tokenIn",
                        "tokenOut",
                        "amountIn",
                        "amountOut",
                        "fee",
                        "baseTokenBalanceChange",
                        "quoteTokenBalanceChange",
                        "activeBinId"
                      ]
                    }
                  },
                  "required": ["signature", "status"]
                }
              }
            }
          }
        }
      }
    },
    "/connectors/meteora/clmm/open-position": {
      "post": {
        "tags": ["/connector/meteora"],
        "description": "Open a new Meteora position",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "network": { "type": "string", "default": "mainnet-beta" },
                  "walletAddress": { "type": "string", "example": "11111111111111111111111111111111" },
                  "lowerPrice": { "type": "number", "example": 100 },
                  "upperPrice": { "type": "number", "example": 180 },
                  "poolAddress": { "type": "string", "example": "2sf5NYcY4zUPXUSmG6f66mskb24t5F8S11pC1Nz5nQT3" },
                  "baseTokenAmount": { "type": "number", "example": 0.1 },
                  "quoteTokenAmount": { "type": "number", "example": 15 },
                  "slippagePct": { "type": "number", "example": 1 },
                  "priorityFeePerCU": {
                    "description": "Priority fee per compute unit (lamports on Solana, Gwei on Ethereum)",
                    "type": "number"
                  },
                  "computeUnits": { "description": "Compute units for transaction", "type": "number" },
                  "strategyType": { "type": "number", "enum": [0, 1, 2, 3, 4, 5], "example": 0 }
                },
                "required": ["network", "walletAddress", "lowerPrice", "upperPrice", "poolAddress"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "signature": { "type": "string" },
                    "status": { "description": "TransactionStatus enum value", "type": "number" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "fee": { "type": "number" },
                        "positionAddress": { "type": "string" },
                        "positionRent": { "type": "number" },
                        "baseTokenAmountAdded": { "type": "number" },
                        "quoteTokenAmountAdded": { "type": "number" }
                      },
                      "required": [
                        "fee",
                        "positionAddress",
                        "positionRent",
                        "baseTokenAmountAdded",
                        "quoteTokenAmountAdded"
                      ]
                    }
                  },
                  "required": ["signature", "status"]
                }
              }
            }
          }
        }
      }
    },
    "/connectors/meteora/clmm/add-liquidity": {
      "post": {
        "tags": ["/connector/meteora"],
        "description": "Add liquidity to a Meteora position",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "network": { "type": "string", "default": "mainnet-beta" },
                  "walletAddress": { "type": "string", "example": "11111111111111111111111111111111" },
                  "positionAddress": { "type": "string" },
                  "baseTokenAmount": { "type": "number" },
                  "quoteTokenAmount": { "type": "number" },
                  "slippagePct": { "type": "number", "example": 1 },
                  "priorityFeePerCU": {
                    "description": "Priority fee per compute unit (lamports on Solana, Gwei on Ethereum)",
                    "type": "number"
                  },
                  "computeUnits": { "description": "Compute units for transaction", "type": "number" },
                  "strategyType": { "type": "number", "enum": [0, 1, 2, 3, 4, 5], "example": 0 }
                },
                "required": ["network", "walletAddress", "positionAddress", "baseTokenAmount", "quoteTokenAmount"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "signature": { "type": "string" },
                    "status": { "description": "TransactionStatus enum value", "type": "number" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "fee": { "type": "number" },
                        "baseTokenAmountAdded": { "type": "number" },
                        "quoteTokenAmountAdded": { "type": "number" }
                      },
                      "required": ["fee", "baseTokenAmountAdded", "quoteTokenAmountAdded"]
                    }
                  },
                  "required": ["signature", "status"]
                }
              }
            }
          }
        }
      }
    },
    "/connectors/meteora/clmm/remove-liquidity": {
      "post": {
        "tags": ["/connector/meteora"],
        "description": "Remove liquidity from a Meteora position",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "network": { "type": "string", "default": "mainnet-beta" },
                  "walletAddress": { "type": "string", "example": "11111111111111111111111111111111" },
                  "positionAddress": { "type": "string" },
                  "percentageToRemove": { "type": "number", "example": 100 },
                  "priorityFeePerCU": {
                    "description": "Priority fee per compute unit (lamports on Solana, Gwei on Ethereum)",
                    "type": "number"
                  },
                  "computeUnits": { "description": "Compute units for transaction", "type": "number" }
                },
                "required": ["network", "walletAddress", "positionAddress", "percentageToRemove"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "signature": { "type": "string" },
                    "status": { "description": "TransactionStatus enum value", "type": "number" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "fee": { "type": "number" },
                        "baseTokenAmountRemoved": { "type": "number" },
                        "quoteTokenAmountRemoved": { "type": "number" }
                      },
                      "required": ["fee", "baseTokenAmountRemoved", "quoteTokenAmountRemoved"]
                    }
                  },
                  "required": ["signature", "status"]
                }
              }
            }
          }
        }
      }
    },
    "/connectors/meteora/clmm/collect-fees": {
      "post": {
        "tags": ["/connector/meteora"],
        "description": "Collect fees from a Meteora position",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "network": { "type": "string", "default": "mainnet-beta" },
                  "walletAddress": { "type": "string", "example": "11111111111111111111111111111111" },
                  "positionAddress": { "type": "string" },
                  "priorityFeePerCU": {
                    "description": "Priority fee per compute unit (lamports on Solana, Gwei on Ethereum)",
                    "type": "number"
                  },
                  "computeUnits": { "description": "Compute units for transaction", "type": "number" }
                },
                "required": ["network", "walletAddress", "positionAddress"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "signature": { "type": "string" },
                    "status": { "description": "TransactionStatus enum value", "type": "number" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "fee": { "type": "number" },
                        "baseFeeAmountCollected": { "type": "number" },
                        "quoteFeeAmountCollected": { "type": "number" }
                      },
                      "required": ["fee", "baseFeeAmountCollected", "quoteFeeAmountCollected"]
                    }
                  },
                  "required": ["signature", "status"]
                }
              }
            }
          }
        }
      }
    },
    "/connectors/meteora/clmm/close-position": {
      "post": {
        "tags": ["/connector/meteora"],
        "description": "Close a Meteora position",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "network": { "type": "string", "default": "mainnet-beta" },
                  "walletAddress": { "type": "string", "example": "11111111111111111111111111111111" },
                  "positionAddress": { "type": "string" },
                  "priorityFeePerCU": {
                    "description": "Priority fee per compute unit (lamports on Solana, Gwei on Ethereum)",
                    "type": "number"
                  },
                  "computeUnits": { "description": "Compute units for transaction", "type": "number" }
                },
                "required": ["network", "walletAddress", "positionAddress"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "signature": { "type": "string" },
                    "status": { "description": "TransactionStatus enum value", "type": "number" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "fee": { "type": "number" },
                        "positionRentRefunded": { "type": "number" },
                        "baseTokenAmountRemoved": { "type": "number" },
                        "quoteTokenAmountRemoved": { "type": "number" },
                        "baseFeeAmountCollected": { "type": "number" },
                        "quoteFeeAmountCollected": { "type": "number" }
                      },
                      "required": [
                        "fee",
                        "positionRentRefunded",
                        "baseTokenAmountRemoved",
                        "quoteTokenAmountRemoved",
                        "baseFeeAmountCollected",
                        "quoteFeeAmountCollected"
                      ]
                    }
                  },
                  "required": ["signature", "status"]
                }
              }
            }
          }
        }
      }
    },
    "/connectors/raydium/amm/pool-info": {
      "get": {
        "tags": ["/connector/raydium"],
        "description": "Get AMM pool information from Raydium",
        "parameters": [
          { "schema": { "type": "string" }, "in": "query", "name": "network", "required": true },
          { "schema": { "type": "string" }, "in": "query", "name": "poolAddress", "required": true }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "address": { "type": "string" },
                    "baseTokenAddress": { "type": "string" },
                    "quoteTokenAddress": { "type": "string" },
                    "feePct": { "type": "number" },
                    "price": { "type": "number" },
                    "baseTokenAmount": { "type": "number" },
                    "quoteTokenAmount": { "type": "number" },
                    "poolType": { "type": "string" },
                    "lpMint": {
                      "type": "object",
                      "properties": { "address": { "type": "string" }, "decimals": { "type": "number" } },
                      "required": ["address", "decimals"]
                    }
                  },
                  "required": [
                    "address",
                    "baseTokenAddress",
                    "quoteTokenAddress",
                    "feePct",
                    "price",
                    "baseTokenAmount",
                    "quoteTokenAmount",
                    "lpMint"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/connectors/raydium/amm/position-info": {
      "get": {
        "tags": ["/connector/raydium"],
        "description": "Get info about a Raydium AMM position",
        "parameters": [
          { "schema": { "type": "string" }, "in": "query", "name": "network", "required": true },
          { "schema": { "type": "string" }, "in": "query", "name": "poolAddress", "required": true },
          { "schema": { "type": "string" }, "in": "query", "name": "walletAddress", "required": true }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "poolAddress": { "type": "string" },
                    "walletAddress": { "type": "string" },
                    "baseTokenAddress": { "type": "string" },
                    "quoteTokenAddress": { "type": "string" },
                    "lpTokenAmount": { "type": "number" },
                    "baseTokenAmount": { "type": "number" },
                    "quoteTokenAmount": { "type": "number" },
                    "price": { "type": "number" }
                  },
                  "required": [
                    "poolAddress",
                    "walletAddress",
                    "baseTokenAddress",
                    "quoteTokenAddress",
                    "lpTokenAmount",
                    "baseTokenAmount",
                    "quoteTokenAmount",
                    "price"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/connectors/raydium/amm/quote-liquidity": {
      "get": {
        "tags": ["/connector/raydium"],
        "description": "Quote amounts for a new Raydium AMM liquidity position",
        "parameters": [
          {
            "schema": { "type": "string", "default": "mainnet-beta" },
            "in": "query",
            "name": "network",
            "required": true
          },
          {
            "schema": { "type": "string" },
            "example": "6UmmUiYoBjSrhakAobJw8BvkmJtDVxaeBtbt7rxWo1mg",
            "in": "query",
            "name": "poolAddress",
            "required": true
          },
          { "schema": { "type": "number" }, "example": 1, "in": "query", "name": "baseTokenAmount", "required": true },
          { "schema": { "type": "number" }, "example": 1, "in": "query", "name": "quoteTokenAmount", "required": true },
          { "schema": { "type": "number" }, "example": 1, "in": "query", "name": "slippagePct", "required": false },
          {
            "schema": { "type": "number" },
            "in": "query",
            "name": "priorityFeePerCU",
            "required": false,
            "description": "Priority fee per compute unit (lamports on Solana, Gwei on Ethereum)"
          },
          {
            "schema": { "type": "number" },
            "in": "query",
            "name": "computeUnits",
            "required": false,
            "description": "Max compute units (Solana) or gas limit (Ethereum)"
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "baseLimited": { "type": "boolean" },
                    "baseTokenAmount": { "type": "number" },
                    "quoteTokenAmount": { "type": "number" },
                    "baseTokenAmountMax": { "type": "number" },
                    "quoteTokenAmountMax": { "type": "number" },
                    "computeUnits": { "description": "Estimated compute units for the transaction", "type": "number" }
                  },
                  "required": [
                    "baseLimited",
                    "baseTokenAmount",
                    "quoteTokenAmount",
                    "baseTokenAmountMax",
                    "quoteTokenAmountMax",
                    "computeUnits"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Default Response",
            "content": {
              "application/json": { "schema": { "type": "object", "properties": { "error": { "type": "string" } } } }
            }
          }
        }
      }
    },
    "/connectors/raydium/amm/quote-swap": {
      "get": {
        "tags": ["/connector/raydium"],
        "description": "Get swap quote for Raydium AMM",
        "parameters": [
          { "schema": { "type": "string" }, "in": "query", "name": "network", "required": true },
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "poolAddress",
            "required": false,
            "description": "Pool address (optional - can be looked up from baseToken and quoteToken)"
          },
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "baseToken",
            "required": true,
            "description": "Token to determine swap direction"
          },
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "quoteToken",
            "required": false,
            "description": "The other token in the pair (optional - required if poolAddress not provided)"
          },
          { "schema": { "type": "number" }, "in": "query", "name": "amount", "required": true },
          {
            "schema": { "enum": ["BUY", "SELL"], "type": "string" },
            "in": "query",
            "name": "side",
            "required": true,
            "description": "Trade direction"
          },
          {
            "schema": { "minimum": 0, "maximum": 100, "type": "number" },
            "in": "query",
            "name": "slippagePct",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "quoteId": { "type": "string" },
                    "poolAddress": { "type": "string" },
                    "tokenIn": { "type": "string" },
                    "tokenOut": { "type": "string" },
                    "amountIn": { "type": "number" },
                    "amountOut": { "type": "number" },
                    "price": { "type": "number" },
                    "slippagePct": { "type": "number" },
                    "priceWithSlippage": {
                      "description": "Price including slippage (worst acceptable price)",
                      "type": "number"
                    },
                    "minAmountOut": { "type": "number" },
                    "maxAmountIn": { "type": "number" },
                    "priceImpactPct": { "type": "number" },
                    "fee": { "type": "number" },
                    "computeUnits": { "type": "number" }
                  },
                  "required": [
                    "poolAddress",
                    "tokenIn",
                    "tokenOut",
                    "amountIn",
                    "amountOut",
                    "price",
                    "priceWithSlippage",
                    "minAmountOut",
                    "maxAmountIn",
                    "priceImpactPct",
                    "fee",
                    "computeUnits"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/connectors/raydium/amm/execute-swap": {
      "post": {
        "tags": ["/connector/raydium"],
        "description": "Execute a swap on Raydium AMM or CPMM",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "walletAddress": { "type": "string" },
                      "network": { "type": "string" },
                      "poolAddress": {
                        "description": "Pool address (optional - can be looked up from baseToken and quoteToken)",
                        "type": "string"
                      },
                      "baseToken": { "type": "string" },
                      "quoteToken": {
                        "description": "The other token in the pair (optional - required if poolAddress not provided)",
                        "type": "string"
                      },
                      "amount": { "type": "number" },
                      "side": { "enum": ["BUY", "SELL"], "type": "string" },
                      "slippagePct": { "minimum": 0, "maximum": 100, "type": "number" },
                      "priorityFeePerCU": {
                        "description": "Priority fee per compute unit (lamports on Solana, Gwei on Ethereum)",
                        "type": "number"
                      },
                      "computeUnits": {
                        "description": "Max compute units (Solana) or gas limit (Ethereum)",
                        "type": "number"
                      }
                    },
                    "required": ["walletAddress", "network", "baseToken", "amount", "side", "slippagePct"],
                    "title": "AmmExecuteSwapRequest"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "priorityFeePerCU": { "description": "Priority fee per compute unit", "type": "number" },
                      "computeUnits": { "description": "Compute units for transaction", "type": "number" }
                    }
                  }
                ],
                "properties": {
                  "network": { "type": "string", "default": "mainnet-beta" },
                  "walletAddress": { "type": "string", "example": "11111111111111111111111111111111" },
                  "baseToken": { "type": "string", "example": "SOL" },
                  "quoteToken": { "type": "string", "example": "USDC" },
                  "amount": { "type": "number", "example": 0.01 },
                  "side": { "type": "string", "example": "SELL" },
                  "poolAddress": { "type": "string", "example": "" },
                  "slippagePct": { "type": "number", "example": 1 }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "signature": { "type": "string" },
                    "status": { "description": "TransactionStatus enum value", "type": "number" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "tokenIn": { "type": "string" },
                        "tokenOut": { "type": "string" },
                        "amountIn": { "type": "number" },
                        "amountOut": { "type": "number" },
                        "fee": { "type": "number" },
                        "baseTokenBalanceChange": { "type": "number" },
                        "quoteTokenBalanceChange": { "type": "number" }
                      },
                      "required": [
                        "tokenIn",
                        "tokenOut",
                        "amountIn",
                        "amountOut",
                        "fee",
                        "baseTokenBalanceChange",
                        "quoteTokenBalanceChange"
                      ]
                    }
                  },
                  "required": ["signature", "status"]
                }
              }
            }
          }
        }
      }
    },
    "/connectors/raydium/amm/add-liquidity": {
      "post": {
        "tags": ["/connector/raydium"],
        "description": "Add liquidity to a Raydium AMM/CPMM pool",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "network": { "type": "string" },
                  "walletAddress": { "type": "string" },
                  "poolAddress": { "type": "string" },
                  "baseTokenAmount": { "type": "number" },
                  "quoteTokenAmount": { "type": "number" },
                  "slippagePct": { "minimum": 0, "maximum": 100, "type": "number" },
                  "priorityFeePerCU": {
                    "description": "Priority fee per compute unit (lamports on Solana, Gwei on Ethereum)",
                    "type": "number"
                  },
                  "computeUnits": {
                    "description": "Max compute units (Solana) or gas limit (Ethereum)",
                    "type": "number"
                  }
                },
                "required": ["network", "walletAddress", "poolAddress", "baseTokenAmount", "quoteTokenAmount"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "signature": { "type": "string" },
                    "status": { "description": "TransactionStatus enum value", "type": "number" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "fee": { "type": "number" },
                        "baseTokenAmountAdded": { "type": "number" },
                        "quoteTokenAmountAdded": { "type": "number" }
                      },
                      "required": ["fee", "baseTokenAmountAdded", "quoteTokenAmountAdded"]
                    }
                  },
                  "required": ["signature", "status"]
                }
              }
            }
          }
        }
      }
    },
    "/connectors/raydium/amm/remove-liquidity": {
      "post": {
        "tags": ["/connector/raydium"],
        "description": "Remove liquidity from a Raydium AMM/CPMM pool",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "network": { "type": "string" },
                  "walletAddress": { "type": "string", "example": "<solana-wallet-address>" },
                  "poolAddress": { "type": "string" },
                  "percentageToRemove": { "minimum": 0, "maximum": 100, "type": "number" },
                  "priorityFeePerCU": {
                    "description": "Priority fee per compute unit (lamports on Solana, Gwei on Ethereum)",
                    "type": "number"
                  },
                  "computeUnits": {
                    "description": "Max compute units (Solana) or gas limit (Ethereum)",
                    "type": "number"
                  }
                },
                "required": ["network", "walletAddress", "poolAddress", "percentageToRemove"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "signature": { "type": "string" },
                    "status": { "description": "TransactionStatus enum value", "type": "number" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "fee": { "type": "number" },
                        "baseTokenAmountRemoved": { "type": "number" },
                        "quoteTokenAmountRemoved": { "type": "number" }
                      },
                      "required": ["fee", "baseTokenAmountRemoved", "quoteTokenAmountRemoved"]
                    }
                  },
                  "required": ["signature", "status"]
                }
              }
            }
          }
        }
      }
    },
    "/connectors/raydium/clmm/pool-info": {
      "get": {
        "tags": ["/connector/raydium"],
        "description": "Get CLMM pool information from Raydium",
        "parameters": [
          { "schema": { "type": "string" }, "in": "query", "name": "network", "required": true },
          { "schema": { "type": "string" }, "in": "query", "name": "poolAddress", "required": true }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "address": { "type": "string" },
                    "baseTokenAddress": { "type": "string" },
                    "quoteTokenAddress": { "type": "string" },
                    "binStep": { "type": "number" },
                    "feePct": { "type": "number" },
                    "price": { "type": "number" },
                    "baseTokenAmount": { "type": "number" },
                    "quoteTokenAmount": { "type": "number" },
                    "activeBinId": { "type": "number" }
                  },
                  "required": [
                    "address",
                    "baseTokenAddress",
                    "quoteTokenAddress",
                    "binStep",
                    "feePct",
                    "price",
                    "baseTokenAmount",
                    "quoteTokenAmount",
                    "activeBinId"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/connectors/raydium/clmm/positions-owned": {
      "get": {
        "tags": ["/connector/raydium"],
        "description": "Retrieve a list of positions owned by a user's wallet in a specific Raydium CLMM pool",
        "parameters": [
          {
            "schema": { "default": "mainnet-beta", "type": "string" },
            "in": "query",
            "name": "network",
            "required": false
          },
          {
            "schema": { "type": "string" },
            "example": "61R1ndXxvsWXXkWSyNkCxnzwd3zUNB8Q2ibmkiLPC8ht",
            "in": "query",
            "name": "poolAddress",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "address": { "type": "string" },
                      "poolAddress": { "type": "string" },
                      "baseTokenAddress": { "type": "string" },
                      "quoteTokenAddress": { "type": "string" },
                      "baseTokenAmount": { "type": "number" },
                      "quoteTokenAmount": { "type": "number" },
                      "baseFeeAmount": { "type": "number" },
                      "quoteFeeAmount": { "type": "number" },
                      "lowerBinId": { "type": "number" },
                      "upperBinId": { "type": "number" },
                      "lowerPrice": { "type": "number" },
                      "upperPrice": { "type": "number" },
                      "price": { "type": "number" }
                    },
                    "required": [
                      "address",
                      "poolAddress",
                      "baseTokenAddress",
                      "quoteTokenAddress",
                      "baseTokenAmount",
                      "quoteTokenAmount",
                      "baseFeeAmount",
                      "quoteFeeAmount",
                      "lowerBinId",
                      "upperBinId",
                      "lowerPrice",
                      "upperPrice",
                      "price"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/connectors/raydium/clmm/position-info": {
      "get": {
        "tags": ["/connector/raydium"],
        "description": "Get info about a Raydium CLMM position",
        "parameters": [
          {
            "schema": { "type": "string", "default": "mainnet-beta" },
            "in": "query",
            "name": "network",
            "required": false
          },
          { "schema": { "type": "string" }, "in": "query", "name": "positionAddress", "required": true }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "address": { "type": "string" },
                    "poolAddress": { "type": "string" },
                    "baseTokenAddress": { "type": "string" },
                    "quoteTokenAddress": { "type": "string" },
                    "baseTokenAmount": { "type": "number" },
                    "quoteTokenAmount": { "type": "number" },
                    "baseFeeAmount": { "type": "number" },
                    "quoteFeeAmount": { "type": "number" },
                    "lowerBinId": { "type": "number" },
                    "upperBinId": { "type": "number" },
                    "lowerPrice": { "type": "number" },
                    "upperPrice": { "type": "number" },
                    "price": { "type": "number" }
                  },
                  "required": [
                    "address",
                    "poolAddress",
                    "baseTokenAddress",
                    "quoteTokenAddress",
                    "baseTokenAmount",
                    "quoteTokenAmount",
                    "baseFeeAmount",
                    "quoteFeeAmount",
                    "lowerBinId",
                    "upperBinId",
                    "lowerPrice",
                    "upperPrice",
                    "price"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/connectors/raydium/clmm/quote-position": {
      "get": {
        "tags": ["/connector/raydium"],
        "description": "Quote amounts for a new Raydium CLMM position",
        "parameters": [
          {
            "schema": { "type": "string", "default": "mainnet-beta" },
            "in": "query",
            "name": "network",
            "required": true
          },
          { "schema": { "type": "number" }, "example": 100, "in": "query", "name": "lowerPrice", "required": true },
          { "schema": { "type": "number" }, "example": 180, "in": "query", "name": "upperPrice", "required": true },
          {
            "schema": { "type": "string" },
            "example": "3ucNos4NbumPLZNWztqGHNFFgkHeRMBQAVemeeomsUxv",
            "in": "query",
            "name": "poolAddress",
            "required": true
          },
          {
            "schema": { "type": "number" },
            "example": 0.1,
            "in": "query",
            "name": "baseTokenAmount",
            "required": false
          },
          {
            "schema": { "type": "number" },
            "example": 15,
            "in": "query",
            "name": "quoteTokenAmount",
            "required": false
          },
          { "schema": { "type": "number" }, "example": 1, "in": "query", "name": "slippagePct", "required": false },
          {
            "schema": { "type": "number" },
            "in": "query",
            "name": "priorityFeePerCU",
            "required": false,
            "description": "Priority fee per compute unit (lamports on Solana, Gwei on Ethereum)"
          },
          {
            "schema": { "type": "number" },
            "in": "query",
            "name": "computeUnits",
            "required": false,
            "description": "Compute units for transaction"
          },
          { "schema": { "type": "string" }, "example": "SOL", "in": "query", "name": "baseToken", "required": false },
          { "schema": { "type": "string" }, "example": "USDC", "in": "query", "name": "quoteToken", "required": false }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "baseLimited": { "type": "boolean" },
                    "baseTokenAmount": { "type": "number" },
                    "quoteTokenAmount": { "type": "number" },
                    "baseTokenAmountMax": { "type": "number" },
                    "quoteTokenAmountMax": { "type": "number" },
                    "liquidity": {},
                    "computeUnits": { "description": "Estimated compute units for the transaction", "type": "number" }
                  },
                  "required": [
                    "baseLimited",
                    "baseTokenAmount",
                    "quoteTokenAmount",
                    "baseTokenAmountMax",
                    "quoteTokenAmountMax",
                    "computeUnits"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Default Response",
            "content": {
              "application/json": { "schema": { "type": "object", "properties": { "error": { "type": "string" } } } }
            }
          }
        }
      }
    },
    "/connectors/raydium/clmm/quote-swap": {
      "get": {
        "tags": ["/connector/raydium"],
        "description": "Get swap quote for Raydium CLMM",
        "parameters": [
          {
            "schema": { "type": "string", "default": "mainnet-beta" },
            "in": "query",
            "name": "network",
            "required": false
          },
          { "schema": { "type": "string" }, "example": "SOL", "in": "query", "name": "baseToken", "required": false },
          { "schema": { "type": "string" }, "example": "USDC", "in": "query", "name": "quoteToken", "required": false },
          { "schema": { "type": "number" }, "example": 0.01, "in": "query", "name": "amount", "required": false },
          { "schema": { "type": "string", "enum": ["BUY", "SELL"] }, "in": "query", "name": "side", "required": false },
          { "schema": { "type": "string" }, "example": "", "in": "query", "name": "poolAddress", "required": false },
          { "schema": { "type": "number" }, "example": 1, "in": "query", "name": "slippagePct", "required": false }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "quoteId": { "type": "string" },
                    "poolAddress": { "type": "string" },
                    "tokenIn": { "type": "string" },
                    "tokenOut": { "type": "string" },
                    "amountIn": { "type": "number" },
                    "amountOut": { "type": "number" },
                    "price": { "type": "number" },
                    "slippagePct": { "type": "number" },
                    "priceWithSlippage": {
                      "description": "Price including slippage (worst acceptable price)",
                      "type": "number"
                    },
                    "minAmountOut": { "type": "number" },
                    "maxAmountIn": { "type": "number" },
                    "priceImpactPct": { "type": "number" },
                    "fee": { "type": "number" },
                    "computeUnits": { "type": "number" },
                    "activeBinId": { "type": "number" }
                  },
                  "required": [
                    "poolAddress",
                    "tokenIn",
                    "tokenOut",
                    "amountIn",
                    "amountOut",
                    "price",
                    "priceWithSlippage",
                    "minAmountOut",
                    "maxAmountIn",
                    "priceImpactPct",
                    "fee",
                    "computeUnits",
                    "activeBinId"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/connectors/raydium/clmm/execute-swap": {
      "post": {
        "tags": ["/connector/raydium"],
        "description": "Execute a swap on Raydium CLMM",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "walletAddress": { "type": "string" },
                      "network": { "type": "string" },
                      "poolAddress": {
                        "description": "Pool address (optional - can be looked up from baseToken and quoteToken)",
                        "type": "string"
                      },
                      "baseToken": { "type": "string" },
                      "quoteToken": {
                        "description": "The other token in the pair (optional - required if poolAddress not provided)",
                        "type": "string"
                      },
                      "amount": { "type": "number" },
                      "side": { "enum": ["BUY", "SELL"], "type": "string" },
                      "slippagePct": { "minimum": 0, "maximum": 100, "type": "number" },
                      "priorityFeePerCU": {
                        "description": "Priority fee per compute unit (lamports on Solana, Gwei on Ethereum)",
                        "type": "number"
                      },
                      "computeUnits": { "description": "Compute units for transaction", "type": "number" }
                    },
                    "required": ["walletAddress", "network", "baseToken", "amount", "side", "slippagePct"]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "priorityFeePerCU": { "description": "Priority fee per compute unit", "type": "number" },
                      "computeUnits": { "description": "Compute units for transaction", "type": "number" }
                    }
                  }
                ],
                "properties": {
                  "walletAddress": { "type": "string", "example": "11111111111111111111111111111111" },
                  "network": { "type": "string", "default": "mainnet-beta" },
                  "poolAddress": { "type": "string", "example": "" },
                  "baseToken": { "type": "string", "example": "SOL" },
                  "quoteToken": { "type": "string", "example": "USDC" },
                  "amount": { "type": "number", "example": 0.01 },
                  "side": { "type": "string", "enum": ["BUY", "SELL"], "example": "SELL" },
                  "slippagePct": { "type": "number", "example": 1 }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "signature": { "type": "string" },
                    "status": { "description": "TransactionStatus enum value", "type": "number" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "tokenIn": { "type": "string" },
                        "tokenOut": { "type": "string" },
                        "amountIn": { "type": "number" },
                        "amountOut": { "type": "number" },
                        "fee": { "type": "number" },
                        "baseTokenBalanceChange": { "type": "number" },
                        "quoteTokenBalanceChange": { "type": "number" },
                        "activeBinId": { "type": "number" }
                      },
                      "required": [
                        "tokenIn",
                        "tokenOut",
                        "amountIn",
                        "amountOut",
                        "fee",
                        "baseTokenBalanceChange",
                        "quoteTokenBalanceChange",
                        "activeBinId"
                      ]
                    }
                  },
                  "required": ["signature", "status"]
                }
              }
            }
          }
        }
      }
    },
    "/connectors/raydium/clmm/open-position": {
      "post": {
        "tags": ["/connector/raydium"],
        "description": "Open a new Raydium CLMM position",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "network": { "type": "string", "default": "mainnet-beta" },
                  "walletAddress": { "type": "string", "example": "11111111111111111111111111111111" },
                  "lowerPrice": { "type": "number", "example": 100 },
                  "upperPrice": { "type": "number", "example": 180 },
                  "poolAddress": { "type": "string", "example": "3ucNos4NbumPLZNWztqGHNFFgkHeRMBQAVemeeomsUxv" },
                  "baseTokenAmount": { "type": "number", "example": 0.1 },
                  "quoteTokenAmount": { "type": "number", "example": 15 },
                  "slippagePct": { "type": "number", "example": 1 },
                  "priorityFeePerCU": {
                    "description": "Priority fee per compute unit (lamports on Solana, Gwei on Ethereum)",
                    "type": "number"
                  },
                  "computeUnits": { "description": "Compute units for transaction", "type": "number" },
                  "baseToken": { "type": "string", "example": "SOL" },
                  "quoteToken": { "type": "string", "example": "USDC" }
                },
                "required": ["network", "walletAddress", "lowerPrice", "upperPrice", "poolAddress"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "signature": { "type": "string" },
                    "status": { "description": "TransactionStatus enum value", "type": "number" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "fee": { "type": "number" },
                        "positionAddress": { "type": "string" },
                        "positionRent": { "type": "number" },
                        "baseTokenAmountAdded": { "type": "number" },
                        "quoteTokenAmountAdded": { "type": "number" }
                      },
                      "required": [
                        "fee",
                        "positionAddress",
                        "positionRent",
                        "baseTokenAmountAdded",
                        "quoteTokenAmountAdded"
                      ]
                    }
                  },
                  "required": ["signature", "status"]
                }
              }
            }
          }
        }
      }
    },
    "/connectors/raydium/clmm/add-liquidity": {
      "post": {
        "tags": ["/connector/raydium"],
        "description": "Add liquidity to existing Raydium CLMM position",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "network": { "type": "string", "default": "mainnet-beta" },
                  "walletAddress": { "type": "string" },
                  "positionAddress": { "type": "string" },
                  "baseTokenAmount": { "type": "number" },
                  "quoteTokenAmount": { "type": "number" },
                  "slippagePct": { "type": "number", "example": 1 },
                  "priorityFeePerCU": {
                    "description": "Priority fee per compute unit (lamports on Solana, Gwei on Ethereum)",
                    "type": "number"
                  },
                  "computeUnits": { "description": "Compute units for transaction", "type": "number" }
                },
                "required": ["network", "walletAddress", "positionAddress", "baseTokenAmount", "quoteTokenAmount"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "signature": { "type": "string" },
                    "status": { "description": "TransactionStatus enum value", "type": "number" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "fee": { "type": "number" },
                        "baseTokenAmountAdded": { "type": "number" },
                        "quoteTokenAmountAdded": { "type": "number" }
                      },
                      "required": ["fee", "baseTokenAmountAdded", "quoteTokenAmountAdded"]
                    }
                  },
                  "required": ["signature", "status"]
                }
              }
            }
          }
        }
      }
    },
    "/connectors/raydium/clmm/remove-liquidity": {
      "post": {
        "tags": ["/connector/raydium"],
        "description": "Remove liquidity from Raydium CLMM position",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "network": { "type": "string", "default": "mainnet-beta" },
                  "walletAddress": { "type": "string" },
                  "positionAddress": { "type": "string" },
                  "percentageToRemove": { "minimum": 0, "maximum": 100, "type": "number" },
                  "priorityFeePerCU": {
                    "description": "Priority fee per compute unit (lamports on Solana, Gwei on Ethereum)",
                    "type": "number"
                  },
                  "computeUnits": { "description": "Compute units for transaction", "type": "number" }
                },
                "required": ["network", "walletAddress", "positionAddress", "percentageToRemove"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "signature": { "type": "string" },
                    "status": { "description": "TransactionStatus enum value", "type": "number" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "fee": { "type": "number" },
                        "baseTokenAmountRemoved": { "type": "number" },
                        "quoteTokenAmountRemoved": { "type": "number" }
                      },
                      "required": ["fee", "baseTokenAmountRemoved", "quoteTokenAmountRemoved"]
                    }
                  },
                  "required": ["signature", "status"]
                }
              }
            }
          }
        }
      }
    },
    "/connectors/raydium/clmm/collect-fees": {
      "post": {
        "tags": ["/connector/raydium"],
        "description": "Collect fees from a Raydium CLMM position",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "network": { "type": "string", "default": "mainnet-beta" },
                  "walletAddress": { "type": "string", "example": "11111111111111111111111111111111" },
                  "positionAddress": { "type": "string" },
                  "priorityFeePerCU": {
                    "description": "Priority fee per compute unit (lamports on Solana, Gwei on Ethereum)",
                    "type": "number"
                  },
                  "computeUnits": { "description": "Compute units for transaction", "type": "number" }
                },
                "required": ["network", "walletAddress", "positionAddress"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "signature": { "type": "string" },
                    "status": { "description": "TransactionStatus enum value", "type": "number" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "fee": { "type": "number" },
                        "baseFeeAmountCollected": { "type": "number" },
                        "quoteFeeAmountCollected": { "type": "number" }
                      },
                      "required": ["fee", "baseFeeAmountCollected", "quoteFeeAmountCollected"]
                    }
                  },
                  "required": ["signature", "status"]
                }
              }
            }
          }
        }
      }
    },
    "/connectors/raydium/clmm/close-position": {
      "post": {
        "tags": ["/connector/raydium"],
        "description": "Close a Raydium CLMM position",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "network": { "type": "string", "default": "mainnet-beta" },
                  "walletAddress": { "type": "string", "example": "11111111111111111111111111111111" },
                  "positionAddress": { "type": "string" },
                  "priorityFeePerCU": {
                    "description": "Priority fee per compute unit (lamports on Solana, Gwei on Ethereum)",
                    "type": "number"
                  },
                  "computeUnits": { "description": "Compute units for transaction", "type": "number" }
                },
                "required": ["network", "walletAddress", "positionAddress"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "signature": { "type": "string" },
                    "status": { "description": "TransactionStatus enum value", "type": "number" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "fee": { "type": "number" },
                        "positionRentRefunded": { "type": "number" },
                        "baseTokenAmountRemoved": { "type": "number" },
                        "quoteTokenAmountRemoved": { "type": "number" },
                        "baseFeeAmountCollected": { "type": "number" },
                        "quoteFeeAmountCollected": { "type": "number" }
                      },
                      "required": [
                        "fee",
                        "positionRentRefunded",
                        "baseTokenAmountRemoved",
                        "quoteTokenAmountRemoved",
                        "baseFeeAmountCollected",
                        "quoteFeeAmountCollected"
                      ]
                    }
                  },
                  "required": ["signature", "status"]
                }
              }
            }
          }
        }
      }
    },
    "/connectors/uniswap/router/quote-swap": {
      "get": {
        "tags": ["/connector/uniswap"],
        "description": "Get an executable swap quote from Uniswap Universal Router",
        "parameters": [
          {
            "schema": {
              "default": "mainnet",
              "enum": ["mainnet", "arbitrum", "optimism", "base", "sepolia", "bsc", "avalanche", "celo", "polygon"],
              "type": "string"
            },
            "examples": {
              "mainnet": { "value": "mainnet" },
              "arbitrum": { "value": "arbitrum" },
              "optimism": { "value": "optimism" },
              "base": { "value": "base" },
              "sepolia": { "value": "sepolia" },
              "bsc": { "value": "bsc" },
              "avalanche": { "value": "avalanche" },
              "celo": { "value": "celo" },
              "polygon": { "value": "polygon" }
            },
            "in": "query",
            "name": "network",
            "required": false,
            "description": "The blockchain network to use"
          },
          {
            "schema": { "type": "string" },
            "example": "WETH",
            "in": "query",
            "name": "baseToken",
            "required": true,
            "description": "Token to determine swap direction"
          },
          {
            "schema": { "type": "string" },
            "example": "USDC",
            "in": "query",
            "name": "quoteToken",
            "required": true,
            "description": "The other token in the pair"
          },
          {
            "schema": { "type": "number" },
            "example": 1,
            "in": "query",
            "name": "amount",
            "required": true,
            "description": "Amount of base token to trade"
          },
          {
            "schema": { "enum": ["BUY", "SELL"], "type": "string" },
            "in": "query",
            "name": "side",
            "required": true,
            "description": "Trade direction - BUY means buying base token with quote token, SELL means selling base token for quote token"
          },
          {
            "schema": { "minimum": 0, "maximum": 100, "default": 1, "type": "number" },
            "example": 1,
            "in": "query",
            "name": "slippagePct",
            "required": false,
            "description": "Maximum acceptable slippage percentage"
          },
          {
            "schema": { "default": "0x0000000000000000000000000000000000000000", "type": "string" },
            "example": "0x0000000000000000000000000000000000000000",
            "in": "query",
            "name": "walletAddress",
            "required": false,
            "description": "Wallet address for more accurate quotes (optional)"
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "quoteId": { "description": "Unique identifier for this quote", "type": "string" },
                    "tokenIn": { "description": "Address of the token being swapped from", "type": "string" },
                    "tokenOut": { "description": "Address of the token being swapped to", "type": "string" },
                    "amountIn": { "description": "Amount of tokenIn to be swapped", "type": "number" },
                    "amountOut": { "description": "Expected amount of tokenOut to receive", "type": "number" },
                    "price": { "description": "Exchange rate between tokenIn and tokenOut", "type": "number" },
                    "slippagePct": { "description": "Slippage percentage used for this quote", "type": "number" },
                    "priceWithSlippage": {
                      "description": "Price including slippage (worst acceptable price)",
                      "type": "number"
                    },
                    "minAmountOut": {
                      "description": "Minimum amount of tokenOut that will be accepted",
                      "type": "number"
                    },
                    "maxAmountIn": { "description": "Maximum amount of tokenIn that will be spent", "type": "number" },
                    "priceImpactPct": {
                      "description": "Estimated price impact as a percentage (0-100)",
                      "type": "number"
                    },
                    "routePath": { "description": "Human-readable route path", "type": "string" }
                  },
                  "required": [
                    "quoteId",
                    "tokenIn",
                    "tokenOut",
                    "amountIn",
                    "amountOut",
                    "price",
                    "slippagePct",
                    "priceWithSlippage",
                    "minAmountOut",
                    "maxAmountIn",
                    "priceImpactPct"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/connectors/uniswap/router/execute-quote": {
      "post": {
        "tags": ["/connector/uniswap"],
        "description": "Execute a previously fetched quote from Uniswap Universal Router",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "walletAddress": {
                    "description": "Wallet address that will execute the swap",
                    "default": "0x0000000000000000000000000000000000000000",
                    "type": "string",
                    "example": "0x0000000000000000000000000000000000000000"
                  },
                  "network": {
                    "description": "The blockchain network to use",
                    "default": "mainnet",
                    "enum": [
                      "mainnet",
                      "arbitrum",
                      "optimism",
                      "base",
                      "sepolia",
                      "bsc",
                      "avalanche",
                      "celo",
                      "polygon"
                    ],
                    "type": "string",
                    "example": "mainnet"
                  },
                  "quoteId": {
                    "description": "ID of the quote to execute",
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                  },
                  "gasPrice": { "description": "Gas price in wei for the transaction", "type": "string" },
                  "maxGas": {
                    "description": "Maximum gas limit for the transaction",
                    "type": "number",
                    "example": 300000
                  }
                },
                "required": ["quoteId"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "signature": { "description": "Transaction signature/hash", "type": "string" },
                    "status": {
                      "description": "Transaction status: 0 = PENDING, 1 = CONFIRMED, -1 = FAILED",
                      "type": "number"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "tokenIn": { "description": "Address of the token swapped from", "type": "string" },
                        "tokenOut": { "description": "Address of the token swapped to", "type": "string" },
                        "amountIn": { "description": "Actual amount of tokenIn swapped", "type": "number" },
                        "amountOut": { "description": "Actual amount of tokenOut received", "type": "number" },
                        "fee": { "description": "Transaction fee paid", "type": "number" },
                        "baseTokenBalanceChange": {
                          "description": "Change in base token balance (negative for decrease)",
                          "type": "number"
                        },
                        "quoteTokenBalanceChange": {
                          "description": "Change in quote token balance (negative for decrease)",
                          "type": "number"
                        }
                      },
                      "required": [
                        "tokenIn",
                        "tokenOut",
                        "amountIn",
                        "amountOut",
                        "fee",
                        "baseTokenBalanceChange",
                        "quoteTokenBalanceChange"
                      ]
                    }
                  },
                  "required": ["signature", "status"]
                }
              }
            }
          }
        }
      }
    },
    "/connectors/uniswap/router/execute-swap": {
      "post": {
        "tags": ["/connector/uniswap"],
        "description": "Quote and execute a token swap on Uniswap Universal Router in one step",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "walletAddress": {
                    "description": "Wallet address that will execute the swap",
                    "default": "0x0000000000000000000000000000000000000000",
                    "type": "string",
                    "example": "0x0000000000000000000000000000000000000000"
                  },
                  "network": {
                    "description": "The blockchain network to use",
                    "default": "mainnet",
                    "enum": [
                      "mainnet",
                      "arbitrum",
                      "optimism",
                      "base",
                      "sepolia",
                      "bsc",
                      "avalanche",
                      "celo",
                      "polygon"
                    ],
                    "type": "string",
                    "example": "mainnet"
                  },
                  "baseToken": {
                    "description": "Token to determine swap direction",
                    "type": "string",
                    "example": "WETH"
                  },
                  "quoteToken": { "description": "The other token in the pair", "type": "string", "example": "USDC" },
                  "amount": { "description": "Amount of base token to trade", "type": "number", "example": 1 },
                  "side": {
                    "description": "Trade direction - BUY means buying base token with quote token, SELL means selling base token for quote token",
                    "enum": ["BUY", "SELL"],
                    "type": "string"
                  },
                  "slippagePct": {
                    "minimum": 0,
                    "maximum": 100,
                    "description": "Maximum acceptable slippage percentage",
                    "default": 1,
                    "type": "number",
                    "example": 1
                  },
                  "gasPrice": { "description": "Gas price in wei for the transaction", "type": "string" },
                  "maxGas": {
                    "description": "Maximum gas limit for the transaction",
                    "type": "number",
                    "example": 300000
                  }
                },
                "required": ["baseToken", "quoteToken", "amount", "side"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "signature": { "description": "Transaction signature/hash", "type": "string" },
                    "status": {
                      "description": "Transaction status: 0 = PENDING, 1 = CONFIRMED, -1 = FAILED",
                      "type": "number"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "tokenIn": { "description": "Address of the token swapped from", "type": "string" },
                        "tokenOut": { "description": "Address of the token swapped to", "type": "string" },
                        "amountIn": { "description": "Actual amount of tokenIn swapped", "type": "number" },
                        "amountOut": { "description": "Actual amount of tokenOut received", "type": "number" },
                        "fee": { "description": "Transaction fee paid", "type": "number" },
                        "baseTokenBalanceChange": {
                          "description": "Change in base token balance (negative for decrease)",
                          "type": "number"
                        },
                        "quoteTokenBalanceChange": {
                          "description": "Change in quote token balance (negative for decrease)",
                          "type": "number"
                        }
                      },
                      "required": [
                        "tokenIn",
                        "tokenOut",
                        "amountIn",
                        "amountOut",
                        "fee",
                        "baseTokenBalanceChange",
                        "quoteTokenBalanceChange"
                      ]
                    }
                  },
                  "required": ["signature", "status"]
                }
              }
            }
          }
        }
      }
    },
    "/connectors/uniswap/amm/pool-info": {
      "get": {
        "tags": ["/connector/uniswap"],
        "description": "Get AMM pool information from Uniswap V2",
        "parameters": [
          { "schema": { "type": "string" }, "in": "query", "name": "network", "required": true },
          { "schema": { "type": "string" }, "in": "query", "name": "poolAddress", "required": true }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "address": { "type": "string" },
                    "baseTokenAddress": { "type": "string" },
                    "quoteTokenAddress": { "type": "string" },
                    "feePct": { "type": "number" },
                    "price": { "type": "number" },
                    "baseTokenAmount": { "type": "number" },
                    "quoteTokenAmount": { "type": "number" },
                    "poolType": { "type": "string" },
                    "lpMint": {
                      "type": "object",
                      "properties": { "address": { "type": "string" }, "decimals": { "type": "number" } },
                      "required": ["address", "decimals"]
                    }
                  },
                  "required": [
                    "address",
                    "baseTokenAddress",
                    "quoteTokenAddress",
                    "feePct",
                    "price",
                    "baseTokenAmount",
                    "quoteTokenAmount",
                    "lpMint"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/connectors/uniswap/amm/position-info": {
      "get": {
        "tags": ["/connector/uniswap"],
        "description": "Get position information for a Uniswap V2 pool",
        "parameters": [
          { "schema": { "type": "string", "default": "base" }, "in": "query", "name": "network", "required": true },
          {
            "schema": { "type": "string" },
            "example": "0x0000000000000000000000000000000000000000",
            "in": "query",
            "name": "walletAddress",
            "required": true
          },
          { "schema": { "type": "string" }, "example": "", "in": "query", "name": "poolAddress", "required": true },
          { "schema": { "type": "string" }, "example": "WETH", "in": "query", "name": "baseToken", "required": false },
          { "schema": { "type": "string" }, "example": "USDC", "in": "query", "name": "quoteToken", "required": false }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "poolAddress": { "type": "string" },
                    "walletAddress": { "type": "string" },
                    "baseTokenAddress": { "type": "string" },
                    "quoteTokenAddress": { "type": "string" },
                    "lpTokenAmount": { "type": "number" },
                    "baseTokenAmount": { "type": "number" },
                    "quoteTokenAmount": { "type": "number" },
                    "price": { "type": "number" }
                  },
                  "required": [
                    "poolAddress",
                    "walletAddress",
                    "baseTokenAddress",
                    "quoteTokenAddress",
                    "lpTokenAmount",
                    "baseTokenAmount",
                    "quoteTokenAmount",
                    "price"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/connectors/uniswap/amm/quote-swap": {
      "get": {
        "tags": ["/connector/uniswap"],
        "description": "Get swap quote for Uniswap V2 AMM",
        "parameters": [
          { "schema": { "type": "string", "default": "base" }, "in": "query", "name": "network", "required": true },
          { "schema": { "type": "string" }, "example": "", "in": "query", "name": "poolAddress", "required": false },
          { "schema": { "type": "string" }, "example": "WETH", "in": "query", "name": "baseToken", "required": true },
          { "schema": { "type": "string" }, "example": "USDC", "in": "query", "name": "quoteToken", "required": false },
          { "schema": { "type": "number" }, "example": 0.001, "in": "query", "name": "amount", "required": true },
          {
            "schema": { "type": "string", "enum": ["BUY", "SELL"] },
            "example": "SELL",
            "in": "query",
            "name": "side",
            "required": true
          },
          { "schema": { "type": "number" }, "example": 1, "in": "query", "name": "slippagePct", "required": true }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "quoteId": { "type": "string" },
                    "poolAddress": { "type": "string" },
                    "tokenIn": { "type": "string" },
                    "tokenOut": { "type": "string" },
                    "amountIn": { "type": "number" },
                    "amountOut": { "type": "number" },
                    "price": { "type": "number" },
                    "slippagePct": { "type": "number" },
                    "priceWithSlippage": {
                      "description": "Price including slippage (worst acceptable price)",
                      "type": "number"
                    },
                    "minAmountOut": { "type": "number" },
                    "maxAmountIn": { "type": "number" },
                    "priceImpactPct": { "type": "number" },
                    "fee": { "type": "number" },
                    "computeUnits": { "type": "number" }
                  },
                  "required": [
                    "poolAddress",
                    "tokenIn",
                    "tokenOut",
                    "amountIn",
                    "amountOut",
                    "price",
                    "priceWithSlippage",
                    "minAmountOut",
                    "maxAmountIn",
                    "priceImpactPct",
                    "fee",
                    "computeUnits"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/connectors/uniswap/amm/quote-liquidity": {
      "get": {
        "tags": ["/connector/uniswap"],
        "description": "Get liquidity quote for a Uniswap V2 pool",
        "parameters": [
          { "schema": { "type": "string", "default": "base" }, "in": "query", "name": "network", "required": true },
          { "schema": { "type": "string" }, "example": "", "in": "query", "name": "poolAddress", "required": true },
          {
            "schema": { "type": "number" },
            "example": 0.001,
            "in": "query",
            "name": "baseTokenAmount",
            "required": true
          },
          {
            "schema": { "type": "number" },
            "example": 2.5,
            "in": "query",
            "name": "quoteTokenAmount",
            "required": true
          },
          { "schema": { "type": "number" }, "example": 1, "in": "query", "name": "slippagePct", "required": false },
          {
            "schema": { "type": "number" },
            "in": "query",
            "name": "priorityFeePerCU",
            "required": false,
            "description": "Priority fee per compute unit (lamports on Solana, Gwei on Ethereum)"
          },
          {
            "schema": { "type": "number" },
            "in": "query",
            "name": "computeUnits",
            "required": false,
            "description": "Max compute units (Solana) or gas limit (Ethereum)"
          },
          { "schema": { "type": "string" }, "example": "WETH", "in": "query", "name": "baseToken", "required": false },
          { "schema": { "type": "string" }, "example": "USDC", "in": "query", "name": "quoteToken", "required": false }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "baseLimited": { "type": "boolean" },
                    "baseTokenAmount": { "type": "number" },
                    "quoteTokenAmount": { "type": "number" },
                    "baseTokenAmountMax": { "type": "number" },
                    "quoteTokenAmountMax": { "type": "number" },
                    "computeUnits": { "description": "Estimated compute units for the transaction", "type": "number" }
                  },
                  "required": [
                    "baseLimited",
                    "baseTokenAmount",
                    "quoteTokenAmount",
                    "baseTokenAmountMax",
                    "quoteTokenAmountMax",
                    "computeUnits"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/connectors/uniswap/amm/execute-swap": {
      "post": {
        "tags": ["/connector/uniswap"],
        "description": "Execute a swap on Uniswap V2 AMM using Router02",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "walletAddress": { "type": "string", "example": "0x0000000000000000000000000000000000000000" },
                  "network": { "type": "string", "default": "base" },
                  "poolAddress": { "type": "string", "example": "" },
                  "baseToken": { "type": "string", "example": "WETH" },
                  "quoteToken": { "type": "string", "example": "USDC" },
                  "amount": { "type": "number", "example": 0.001 },
                  "side": { "type": "string", "enum": ["BUY", "SELL"], "example": "SELL" },
                  "slippagePct": { "type": "number", "example": 1 },
                  "priorityFeePerCU": {
                    "description": "Priority fee per compute unit (lamports on Solana, Gwei on Ethereum)",
                    "type": "number"
                  },
                  "computeUnits": {
                    "description": "Max compute units (Solana) or gas limit (Ethereum)",
                    "type": "number"
                  }
                },
                "required": ["walletAddress", "network", "baseToken", "amount", "side", "slippagePct"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "signature": { "type": "string" },
                    "status": { "description": "TransactionStatus enum value", "type": "number" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "tokenIn": { "type": "string" },
                        "tokenOut": { "type": "string" },
                        "amountIn": { "type": "number" },
                        "amountOut": { "type": "number" },
                        "fee": { "type": "number" },
                        "baseTokenBalanceChange": { "type": "number" },
                        "quoteTokenBalanceChange": { "type": "number" }
                      },
                      "required": [
                        "tokenIn",
                        "tokenOut",
                        "amountIn",
                        "amountOut",
                        "fee",
                        "baseTokenBalanceChange",
                        "quoteTokenBalanceChange"
                      ]
                    }
                  },
                  "required": ["signature", "status"]
                }
              }
            }
          }
        }
      }
    },
    "/connectors/uniswap/amm/add-liquidity": {
      "post": {
        "tags": ["/connector/uniswap"],
        "description": "Add liquidity to a Uniswap V2 pool",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "network": { "type": "string", "default": "base" },
                  "walletAddress": { "type": "string", "example": "0x0000000000000000000000000000000000000000" },
                  "poolAddress": { "type": "string", "example": "" },
                  "baseTokenAmount": { "type": "number", "example": 0.001 },
                  "quoteTokenAmount": { "type": "number", "example": 2.5 },
                  "slippagePct": { "type": "number", "example": 1 },
                  "priorityFeePerCU": {
                    "description": "Priority fee per compute unit (lamports on Solana, Gwei on Ethereum)",
                    "type": "number"
                  },
                  "computeUnits": {
                    "description": "Max compute units (Solana) or gas limit (Ethereum)",
                    "type": "number"
                  },
                  "baseToken": { "type": "string", "example": "WETH" },
                  "quoteToken": { "type": "string", "example": "USDC" }
                },
                "required": ["network", "walletAddress", "poolAddress", "baseTokenAmount", "quoteTokenAmount"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "signature": { "type": "string" },
                    "status": { "description": "TransactionStatus enum value", "type": "number" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "fee": { "type": "number" },
                        "baseTokenAmountAdded": { "type": "number" },
                        "quoteTokenAmountAdded": { "type": "number" }
                      },
                      "required": ["fee", "baseTokenAmountAdded", "quoteTokenAmountAdded"]
                    }
                  },
                  "required": ["signature", "status"]
                }
              }
            }
          }
        }
      }
    },
    "/connectors/uniswap/amm/remove-liquidity": {
      "post": {
        "tags": ["/connector/uniswap"],
        "description": "Remove liquidity from a Uniswap V2 pool",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "network": { "type": "string", "default": "base" },
                  "walletAddress": { "type": "string", "example": "0x0000000000000000000000000000000000000000" },
                  "poolAddress": { "type": "string", "example": "" },
                  "percentageToRemove": { "type": "number", "example": 100 },
                  "priorityFeePerCU": {
                    "description": "Priority fee per compute unit (lamports on Solana, Gwei on Ethereum)",
                    "type": "number"
                  },
                  "computeUnits": {
                    "description": "Max compute units (Solana) or gas limit (Ethereum)",
                    "type": "number"
                  },
                  "baseToken": { "type": "string", "example": "WETH" },
                  "quoteToken": { "type": "string", "example": "USDC" }
                },
                "required": ["network", "walletAddress", "poolAddress", "percentageToRemove"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "signature": { "type": "string" },
                    "status": { "description": "TransactionStatus enum value", "type": "number" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "fee": { "type": "number" },
                        "baseTokenAmountRemoved": { "type": "number" },
                        "quoteTokenAmountRemoved": { "type": "number" }
                      },
                      "required": ["fee", "baseTokenAmountRemoved", "quoteTokenAmountRemoved"]
                    }
                  },
                  "required": ["signature", "status"]
                }
              }
            }
          }
        }
      }
    },
    "/connectors/uniswap/clmm/pool-info": {
      "get": {
        "tags": ["/connector/uniswap"],
        "description": "Get CLMM pool information from Uniswap V3",
        "parameters": [
          { "schema": { "type": "string", "default": "base" }, "in": "query", "name": "network", "required": true },
          { "schema": { "type": "string" }, "example": "", "in": "query", "name": "poolAddress", "required": true },
          { "schema": { "type": "string" }, "example": "WETH", "in": "query", "name": "baseToken", "required": false },
          { "schema": { "type": "string" }, "example": "USDC", "in": "query", "name": "quoteToken", "required": false }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "address": { "type": "string" },
                    "baseTokenAddress": { "type": "string" },
                    "quoteTokenAddress": { "type": "string" },
                    "binStep": { "type": "number" },
                    "feePct": { "type": "number" },
                    "price": { "type": "number" },
                    "baseTokenAmount": { "type": "number" },
                    "quoteTokenAmount": { "type": "number" },
                    "activeBinId": { "type": "number" }
                  },
                  "required": [
                    "address",
                    "baseTokenAddress",
                    "quoteTokenAddress",
                    "binStep",
                    "feePct",
                    "price",
                    "baseTokenAmount",
                    "quoteTokenAmount",
                    "activeBinId"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/connectors/uniswap/clmm/position-info": {
      "get": {
        "tags": ["/connector/uniswap"],
        "description": "Get position information for a Uniswap V3 position",
        "parameters": [
          { "schema": { "type": "string", "default": "base" }, "in": "query", "name": "network", "required": true },
          {
            "schema": { "type": "string" },
            "example": "1234",
            "in": "query",
            "name": "positionAddress",
            "required": true,
            "description": "Position NFT token ID"
          },
          {
            "schema": { "type": "string" },
            "example": "0x0000000000000000000000000000000000000000",
            "in": "query",
            "name": "walletAddress",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "address": { "type": "string" },
                    "poolAddress": { "type": "string" },
                    "baseTokenAddress": { "type": "string" },
                    "quoteTokenAddress": { "type": "string" },
                    "baseTokenAmount": { "type": "number" },
                    "quoteTokenAmount": { "type": "number" },
                    "baseFeeAmount": { "type": "number" },
                    "quoteFeeAmount": { "type": "number" },
                    "lowerBinId": { "type": "number" },
                    "upperBinId": { "type": "number" },
                    "lowerPrice": { "type": "number" },
                    "upperPrice": { "type": "number" },
                    "price": { "type": "number" }
                  },
                  "required": [
                    "address",
                    "poolAddress",
                    "baseTokenAddress",
                    "quoteTokenAddress",
                    "baseTokenAmount",
                    "quoteTokenAmount",
                    "baseFeeAmount",
                    "quoteFeeAmount",
                    "lowerBinId",
                    "upperBinId",
                    "lowerPrice",
                    "upperPrice",
                    "price"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/connectors/uniswap/clmm/positions-owned": {
      "get": {
        "tags": ["/connector/uniswap"],
        "description": "Get all Uniswap V3 positions owned by a wallet",
        "parameters": [
          {
            "schema": { "default": "base", "type": "string" },
            "example": "base",
            "in": "query",
            "name": "network",
            "required": false
          },
          {
            "schema": { "type": "string" },
            "example": "0x0000000000000000000000000000000000000000",
            "in": "query",
            "name": "walletAddress",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "address": { "type": "string" },
                      "poolAddress": { "type": "string" },
                      "baseTokenAddress": { "type": "string" },
                      "quoteTokenAddress": { "type": "string" },
                      "baseTokenAmount": { "type": "number" },
                      "quoteTokenAmount": { "type": "number" },
                      "baseFeeAmount": { "type": "number" },
                      "quoteFeeAmount": { "type": "number" },
                      "lowerBinId": { "type": "number" },
                      "upperBinId": { "type": "number" },
                      "lowerPrice": { "type": "number" },
                      "upperPrice": { "type": "number" },
                      "price": { "type": "number" }
                    },
                    "required": [
                      "address",
                      "poolAddress",
                      "baseTokenAddress",
                      "quoteTokenAddress",
                      "baseTokenAmount",
                      "quoteTokenAmount",
                      "baseFeeAmount",
                      "quoteFeeAmount",
                      "lowerBinId",
                      "upperBinId",
                      "lowerPrice",
                      "upperPrice",
                      "price"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/connectors/uniswap/clmm/quote-position": {
      "get": {
        "tags": ["/connector/uniswap"],
        "description": "Get a quote for opening a position on Uniswap V3",
        "parameters": [
          { "schema": { "type": "string", "default": "base" }, "in": "query", "name": "network", "required": true },
          { "schema": { "type": "number" }, "example": 1000, "in": "query", "name": "lowerPrice", "required": true },
          { "schema": { "type": "number" }, "example": 4000, "in": "query", "name": "upperPrice", "required": true },
          { "schema": { "type": "string" }, "example": "", "in": "query", "name": "poolAddress", "required": true },
          {
            "schema": { "type": "number" },
            "example": 0.001,
            "in": "query",
            "name": "baseTokenAmount",
            "required": false
          },
          {
            "schema": { "type": "number" },
            "example": 3,
            "in": "query",
            "name": "quoteTokenAmount",
            "required": false
          },
          {
            "schema": { "minimum": 0, "maximum": 100, "type": "number" },
            "in": "query",
            "name": "slippagePct",
            "required": false
          },
          {
            "schema": { "type": "number" },
            "in": "query",
            "name": "priorityFeePerCU",
            "required": false,
            "description": "Priority fee per compute unit (lamports on Solana, Gwei on Ethereum)"
          },
          {
            "schema": { "type": "number" },
            "in": "query",
            "name": "computeUnits",
            "required": false,
            "description": "Compute units for transaction"
          },
          { "schema": { "type": "string" }, "example": "WETH", "in": "query", "name": "baseToken", "required": false },
          { "schema": { "type": "string" }, "example": "USDC", "in": "query", "name": "quoteToken", "required": false }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "baseLimited": { "type": "boolean" },
                    "baseTokenAmount": { "type": "number" },
                    "quoteTokenAmount": { "type": "number" },
                    "baseTokenAmountMax": { "type": "number" },
                    "quoteTokenAmountMax": { "type": "number" },
                    "liquidity": {},
                    "computeUnits": { "description": "Estimated compute units for the transaction", "type": "number" }
                  },
                  "required": [
                    "baseLimited",
                    "baseTokenAmount",
                    "quoteTokenAmount",
                    "baseTokenAmountMax",
                    "quoteTokenAmountMax",
                    "computeUnits"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/connectors/uniswap/clmm/quote-swap": {
      "get": {
        "tags": ["/connector/uniswap"],
        "description": "Get swap quote for Uniswap V3 CLMM",
        "parameters": [
          { "schema": { "type": "string", "default": "base" }, "in": "query", "name": "network", "required": true },
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "poolAddress",
            "required": false,
            "description": "Pool address (optional - can be looked up from baseToken and quoteToken)"
          },
          { "schema": { "type": "string" }, "example": "WETH", "in": "query", "name": "baseToken", "required": true },
          { "schema": { "type": "string" }, "example": "USDC", "in": "query", "name": "quoteToken", "required": false },
          { "schema": { "type": "number" }, "example": 0.001, "in": "query", "name": "amount", "required": true },
          {
            "schema": { "type": "string", "enum": ["BUY", "SELL"] },
            "example": "SELL",
            "in": "query",
            "name": "side",
            "required": true
          },
          { "schema": { "type": "number" }, "example": 1, "in": "query", "name": "slippagePct", "required": true }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "quoteId": { "type": "string" },
                    "poolAddress": { "type": "string" },
                    "tokenIn": { "type": "string" },
                    "tokenOut": { "type": "string" },
                    "amountIn": { "type": "number" },
                    "amountOut": { "type": "number" },
                    "price": { "type": "number" },
                    "slippagePct": { "type": "number" },
                    "priceWithSlippage": {
                      "description": "Price including slippage (worst acceptable price)",
                      "type": "number"
                    },
                    "minAmountOut": { "type": "number" },
                    "maxAmountIn": { "type": "number" },
                    "priceImpactPct": { "type": "number" },
                    "fee": { "type": "number" },
                    "computeUnits": { "type": "number" },
                    "activeBinId": { "type": "number" }
                  },
                  "required": [
                    "poolAddress",
                    "tokenIn",
                    "tokenOut",
                    "amountIn",
                    "amountOut",
                    "price",
                    "priceWithSlippage",
                    "minAmountOut",
                    "maxAmountIn",
                    "priceImpactPct",
                    "fee",
                    "computeUnits",
                    "activeBinId"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/connectors/uniswap/clmm/execute-swap": {
      "post": {
        "tags": ["/connector/uniswap"],
        "description": "Execute a swap on Uniswap V3 CLMM using SwapRouter02",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "walletAddress": { "type": "string", "example": "0x0000000000000000000000000000000000000000" },
                  "network": { "type": "string", "default": "base" },
                  "poolAddress": { "type": "string", "example": "" },
                  "baseToken": { "type": "string", "example": "WETH" },
                  "quoteToken": { "type": "string", "example": "USDC" },
                  "amount": { "type": "number", "example": 0.001 },
                  "side": { "type": "string", "enum": ["BUY", "SELL"], "example": "SELL" },
                  "slippagePct": { "type": "number", "example": 1 },
                  "priorityFeePerCU": {
                    "description": "Priority fee per compute unit (lamports on Solana, Gwei on Ethereum)",
                    "type": "number"
                  },
                  "computeUnits": { "description": "Compute units for transaction", "type": "number" }
                },
                "required": ["walletAddress", "network", "baseToken", "amount", "side", "slippagePct"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "signature": { "type": "string" },
                    "status": { "description": "TransactionStatus enum value", "type": "number" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "tokenIn": { "type": "string" },
                        "tokenOut": { "type": "string" },
                        "amountIn": { "type": "number" },
                        "amountOut": { "type": "number" },
                        "fee": { "type": "number" },
                        "baseTokenBalanceChange": { "type": "number" },
                        "quoteTokenBalanceChange": { "type": "number" },
                        "activeBinId": { "type": "number" }
                      },
                      "required": [
                        "tokenIn",
                        "tokenOut",
                        "amountIn",
                        "amountOut",
                        "fee",
                        "baseTokenBalanceChange",
                        "quoteTokenBalanceChange",
                        "activeBinId"
                      ]
                    }
                  },
                  "required": ["signature", "status"]
                }
              }
            }
          }
        }
      }
    },
    "/connectors/uniswap/clmm/open-position": {
      "post": {
        "tags": ["/connector/uniswap"],
        "description": "Open a new liquidity position in a Uniswap V3 pool",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "network": { "type": "string", "default": "base" },
                  "walletAddress": { "type": "string", "example": "0x0000000000000000000000000000000000000000" },
                  "lowerPrice": { "type": "number", "example": 1000 },
                  "upperPrice": { "type": "number", "example": 4000 },
                  "poolAddress": { "type": "string", "example": "" },
                  "baseTokenAmount": { "type": "number", "example": 0.001 },
                  "quoteTokenAmount": { "type": "number", "example": 3 },
                  "slippagePct": { "type": "number", "example": 1 },
                  "priorityFeePerCU": {
                    "description": "Priority fee per compute unit (lamports on Solana, Gwei on Ethereum)",
                    "type": "number"
                  },
                  "computeUnits": { "description": "Compute units for transaction", "type": "number" },
                  "baseToken": { "type": "string", "example": "WETH" },
                  "quoteToken": { "type": "string", "example": "USDC" }
                },
                "required": ["network", "walletAddress", "lowerPrice", "upperPrice", "poolAddress"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "signature": { "type": "string" },
                    "status": { "description": "TransactionStatus enum value", "type": "number" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "fee": { "type": "number" },
                        "positionAddress": { "type": "string" },
                        "positionRent": { "type": "number" },
                        "baseTokenAmountAdded": { "type": "number" },
                        "quoteTokenAmountAdded": { "type": "number" }
                      },
                      "required": [
                        "fee",
                        "positionAddress",
                        "positionRent",
                        "baseTokenAmountAdded",
                        "quoteTokenAmountAdded"
                      ]
                    }
                  },
                  "required": ["signature", "status"]
                }
              }
            }
          }
        }
      }
    },
    "/connectors/uniswap/clmm/add-liquidity": {
      "post": {
        "tags": ["/connector/uniswap"],
        "description": "Add liquidity to an existing Uniswap V3 position",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "network": { "type": "string", "default": "base" },
                  "walletAddress": { "type": "string", "example": "0x..." },
                  "positionAddress": { "type": "string", "description": "Position NFT token ID" },
                  "baseTokenAmount": { "type": "number", "example": 0.1 },
                  "quoteTokenAmount": { "type": "number", "example": 200 },
                  "slippagePct": { "type": "number", "example": 1 },
                  "priorityFeePerCU": {
                    "description": "Priority fee per compute unit (lamports on Solana, Gwei on Ethereum)",
                    "type": "number"
                  },
                  "computeUnits": { "description": "Compute units for transaction", "type": "number" }
                },
                "required": ["network", "walletAddress", "positionAddress", "baseTokenAmount", "quoteTokenAmount"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "signature": { "type": "string" },
                    "status": { "description": "TransactionStatus enum value", "type": "number" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "fee": { "type": "number" },
                        "baseTokenAmountAdded": { "type": "number" },
                        "quoteTokenAmountAdded": { "type": "number" }
                      },
                      "required": ["fee", "baseTokenAmountAdded", "quoteTokenAmountAdded"]
                    }
                  },
                  "required": ["signature", "status"]
                }
              }
            }
          }
        }
      }
    },
    "/connectors/uniswap/clmm/remove-liquidity": {
      "post": {
        "tags": ["/connector/uniswap"],
        "description": "Remove liquidity from a Uniswap V3 position",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "network": { "type": "string", "default": "base" },
                  "walletAddress": { "type": "string", "example": "0x0000000000000000000000000000000000000000" },
                  "positionAddress": { "type": "string", "description": "Position NFT token ID", "example": "1234" },
                  "percentageToRemove": { "type": "number", "minimum": 0, "maximum": 100, "example": 50 },
                  "priorityFeePerCU": {
                    "description": "Priority fee per compute unit (lamports on Solana, Gwei on Ethereum)",
                    "type": "number"
                  },
                  "computeUnits": { "description": "Compute units for transaction", "type": "number" }
                },
                "required": ["network", "walletAddress", "positionAddress", "percentageToRemove"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "signature": { "type": "string" },
                    "status": { "description": "TransactionStatus enum value", "type": "number" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "fee": { "type": "number" },
                        "baseTokenAmountRemoved": { "type": "number" },
                        "quoteTokenAmountRemoved": { "type": "number" }
                      },
                      "required": ["fee", "baseTokenAmountRemoved", "quoteTokenAmountRemoved"]
                    }
                  },
                  "required": ["signature", "status"]
                }
              }
            }
          }
        }
      }
    },
    "/connectors/uniswap/clmm/collect-fees": {
      "post": {
        "tags": ["/connector/uniswap"],
        "description": "Collect fees from a Uniswap V3 position",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "network": { "type": "string", "default": "base" },
                  "walletAddress": { "type": "string", "example": "0x0000000000000000000000000000000000000000" },
                  "positionAddress": { "type": "string", "description": "Position NFT token ID", "example": "1234" },
                  "priorityFeePerCU": {
                    "description": "Priority fee per compute unit (lamports on Solana, Gwei on Ethereum)",
                    "type": "number"
                  },
                  "computeUnits": { "description": "Compute units for transaction", "type": "number" }
                },
                "required": ["network", "walletAddress", "positionAddress"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "signature": { "type": "string" },
                    "status": { "description": "TransactionStatus enum value", "type": "number" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "fee": { "type": "number" },
                        "baseFeeAmountCollected": { "type": "number" },
                        "quoteFeeAmountCollected": { "type": "number" }
                      },
                      "required": ["fee", "baseFeeAmountCollected", "quoteFeeAmountCollected"]
                    }
                  },
                  "required": ["signature", "status"]
                }
              }
            }
          }
        }
      }
    },
    "/connectors/uniswap/clmm/close-position": {
      "post": {
        "tags": ["/connector/uniswap"],
        "description": "Close a Uniswap V3 position by removing all liquidity and collecting fees",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "network": { "type": "string", "default": "base" },
                  "walletAddress": { "type": "string", "example": "0x..." },
                  "positionAddress": { "type": "string", "description": "Position NFT token ID" },
                  "priorityFeePerCU": {
                    "description": "Priority fee per compute unit (lamports on Solana, Gwei on Ethereum)",
                    "type": "number"
                  },
                  "computeUnits": { "description": "Compute units for transaction", "type": "number" }
                },
                "required": ["network", "walletAddress", "positionAddress"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "signature": { "type": "string" },
                    "status": { "description": "TransactionStatus enum value", "type": "number" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "fee": { "type": "number" },
                        "positionRentRefunded": { "type": "number" },
                        "baseTokenAmountRemoved": { "type": "number" },
                        "quoteTokenAmountRemoved": { "type": "number" },
                        "baseFeeAmountCollected": { "type": "number" },
                        "quoteFeeAmountCollected": { "type": "number" }
                      },
                      "required": [
                        "fee",
                        "positionRentRefunded",
                        "baseTokenAmountRemoved",
                        "quoteTokenAmountRemoved",
                        "baseFeeAmountCollected",
                        "quoteFeeAmountCollected"
                      ]
                    }
                  },
                  "required": ["signature", "status"]
                }
              }
            }
          }
        }
      }
    },
    "/connectors/0x/router/quote-swap": {
      "get": {
        "tags": ["/connector/0x"],
        "description": "Get a swap quote from 0x. Use indicativePrice=true for price discovery only, or false/undefined for executable quotes",
        "parameters": [
          {
            "schema": {
              "default": "mainnet",
              "enum": ["mainnet", "sepolia", "arbitrum", "avalanche", "base", "bsc", "celo", "optimism", "polygon"],
              "type": "string"
            },
            "examples": {
              "mainnet": { "value": "mainnet" },
              "sepolia": { "value": "sepolia" },
              "arbitrum": { "value": "arbitrum" },
              "avalanche": { "value": "avalanche" },
              "base": { "value": "base" },
              "bsc": { "value": "bsc" },
              "celo": { "value": "celo" },
              "optimism": { "value": "optimism" },
              "polygon": { "value": "polygon" }
            },
            "in": "query",
            "name": "network",
            "required": false,
            "description": "The blockchain network to use"
          },
          {
            "schema": { "type": "string" },
            "example": "WETH",
            "in": "query",
            "name": "baseToken",
            "required": true,
            "description": "Token to determine swap direction"
          },
          {
            "schema": { "type": "string" },
            "example": "USDC",
            "in": "query",
            "name": "quoteToken",
            "required": true,
            "description": "The other token in the pair"
          },
          {
            "schema": { "type": "number" },
            "example": 1,
            "in": "query",
            "name": "amount",
            "required": true,
            "description": "Amount of base token to trade"
          },
          {
            "schema": { "enum": ["BUY", "SELL"], "type": "string" },
            "in": "query",
            "name": "side",
            "required": true,
            "description": "Trade direction - BUY means buying base token with quote token, SELL means selling base token for quote token"
          },
          {
            "schema": { "minimum": 0, "maximum": 100, "type": "number" },
            "example": 1,
            "in": "query",
            "name": "slippagePct",
            "required": false,
            "description": "Maximum acceptable slippage percentage"
          },
          {
            "schema": { "default": true, "type": "boolean" },
            "in": "query",
            "name": "indicativePrice",
            "required": false,
            "description": "If true, returns indicative pricing only (no commitment). If false, returns firm quote ready for execution"
          },
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "takerAddress",
            "required": false,
            "description": "Ethereum wallet address that will execute the swap (optional for quotes)"
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "quoteId": { "description": "Unique identifier for this quote", "type": "string" },
                    "tokenIn": { "description": "Address of the token being swapped from", "type": "string" },
                    "tokenOut": { "description": "Address of the token being swapped to", "type": "string" },
                    "amountIn": { "description": "Amount of tokenIn to be swapped", "type": "number" },
                    "amountOut": { "description": "Expected amount of tokenOut to receive", "type": "number" },
                    "price": { "description": "Exchange rate between tokenIn and tokenOut", "type": "number" },
                    "slippagePct": { "description": "Slippage percentage used for this quote", "type": "number" },
                    "priceWithSlippage": {
                      "description": "Price including slippage (worst acceptable price)",
                      "type": "number"
                    },
                    "minAmountOut": {
                      "description": "Minimum amount of tokenOut that will be accepted",
                      "type": "number"
                    },
                    "maxAmountIn": { "description": "Maximum amount of tokenIn that will be spent", "type": "number" },
                    "priceImpactPct": {
                      "description": "Estimated price impact as a percentage (0-100)",
                      "type": "number"
                    },
                    "expirationTime": {
                      "description": "Unix timestamp when this quote expires (only for firm quotes)",
                      "type": "number"
                    },
                    "gasEstimate": { "description": "Estimated gas required for the swap", "type": "string" },
                    "sources": { "description": "Liquidity sources used for this quote", "type": "array", "items": {} },
                    "allowanceTarget": {
                      "description": "Contract address that needs token approval",
                      "type": "string"
                    },
                    "to": { "description": "Contract address to send transaction to", "type": "string" },
                    "data": { "description": "Encoded transaction data", "type": "string" },
                    "value": { "description": "ETH value to send with transaction", "type": "string" }
                  },
                  "required": [
                    "quoteId",
                    "tokenIn",
                    "tokenOut",
                    "amountIn",
                    "amountOut",
                    "price",
                    "slippagePct",
                    "priceWithSlippage",
                    "minAmountOut",
                    "maxAmountIn",
                    "priceImpactPct",
                    "gasEstimate"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/connectors/0x/router/execute-quote": {
      "post": {
        "tags": ["/connector/0x"],
        "description": "Execute a previously fetched quote from 0x",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "walletAddress": {
                    "description": "Wallet address that will execute the swap",
                    "default": "0x0000000000000000000000000000000000000000",
                    "type": "string",
                    "example": "0x0000000000000000000000000000000000000000"
                  },
                  "network": {
                    "description": "The blockchain network to use",
                    "default": "mainnet",
                    "enum": [
                      "mainnet",
                      "sepolia",
                      "arbitrum",
                      "avalanche",
                      "base",
                      "bsc",
                      "celo",
                      "optimism",
                      "polygon"
                    ],
                    "type": "string",
                    "example": "mainnet"
                  },
                  "quoteId": {
                    "description": "ID of the quote to execute",
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                  },
                  "gasPrice": { "description": "Gas price in wei for the transaction", "type": "string" },
                  "maxGas": {
                    "description": "Maximum gas limit for the transaction",
                    "type": "number",
                    "example": 300000
                  }
                },
                "required": ["quoteId"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "signature": { "description": "Transaction signature/hash", "type": "string" },
                    "status": {
                      "description": "Transaction status: 0 = PENDING, 1 = CONFIRMED, -1 = FAILED",
                      "type": "number"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "tokenIn": { "description": "Address of the token swapped from", "type": "string" },
                        "tokenOut": { "description": "Address of the token swapped to", "type": "string" },
                        "amountIn": { "description": "Actual amount of tokenIn swapped", "type": "number" },
                        "amountOut": { "description": "Actual amount of tokenOut received", "type": "number" },
                        "fee": { "description": "Transaction fee paid", "type": "number" },
                        "baseTokenBalanceChange": {
                          "description": "Change in base token balance (negative for decrease)",
                          "type": "number"
                        },
                        "quoteTokenBalanceChange": {
                          "description": "Change in quote token balance (negative for decrease)",
                          "type": "number"
                        }
                      },
                      "required": [
                        "tokenIn",
                        "tokenOut",
                        "amountIn",
                        "amountOut",
                        "fee",
                        "baseTokenBalanceChange",
                        "quoteTokenBalanceChange"
                      ]
                    }
                  },
                  "required": ["signature", "status"]
                }
              }
            }
          }
        }
      }
    },
    "/connectors/0x/router/execute-swap": {
      "post": {
        "tags": ["/connector/0x"],
        "description": "Quote and execute a token swap on 0x in one step",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "walletAddress": {
                    "description": "Wallet address that will execute the swap",
                    "default": "0x0000000000000000000000000000000000000000",
                    "type": "string",
                    "example": "0x0000000000000000000000000000000000000000"
                  },
                  "network": {
                    "description": "The blockchain network to use",
                    "default": "mainnet",
                    "enum": [
                      "mainnet",
                      "sepolia",
                      "arbitrum",
                      "avalanche",
                      "base",
                      "bsc",
                      "celo",
                      "optimism",
                      "polygon"
                    ],
                    "type": "string",
                    "example": "mainnet"
                  },
                  "baseToken": {
                    "description": "Token to determine swap direction",
                    "type": "string",
                    "example": "WETH"
                  },
                  "quoteToken": { "description": "The other token in the pair", "type": "string", "example": "USDC" },
                  "amount": { "description": "Amount of base token to trade", "type": "number", "example": 1 },
                  "side": {
                    "description": "Trade direction - BUY means buying base token with quote token, SELL means selling base token for quote token",
                    "enum": ["BUY", "SELL"],
                    "type": "string"
                  },
                  "slippagePct": {
                    "minimum": 0,
                    "maximum": 100,
                    "description": "Maximum acceptable slippage percentage",
                    "type": "number",
                    "example": 1
                  },
                  "gasPrice": { "description": "Gas price in wei for the transaction", "type": "string" },
                  "maxGas": {
                    "description": "Maximum gas limit for the transaction",
                    "type": "number",
                    "example": 300000
                  }
                },
                "required": ["baseToken", "quoteToken", "amount", "side"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "signature": { "description": "Transaction signature/hash", "type": "string" },
                    "status": {
                      "description": "Transaction status: 0 = PENDING, 1 = CONFIRMED, -1 = FAILED",
                      "type": "number"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "tokenIn": { "description": "Address of the token swapped from", "type": "string" },
                        "tokenOut": { "description": "Address of the token swapped to", "type": "string" },
                        "amountIn": { "description": "Actual amount of tokenIn swapped", "type": "number" },
                        "amountOut": { "description": "Actual amount of tokenOut received", "type": "number" },
                        "fee": { "description": "Transaction fee paid", "type": "number" },
                        "baseTokenBalanceChange": {
                          "description": "Change in base token balance (negative for decrease)",
                          "type": "number"
                        },
                        "quoteTokenBalanceChange": {
                          "description": "Change in quote token balance (negative for decrease)",
                          "type": "number"
                        }
                      },
                      "required": [
                        "tokenIn",
                        "tokenOut",
                        "amountIn",
                        "amountOut",
                        "fee",
                        "baseTokenBalanceChange",
                        "quoteTokenBalanceChange"
                      ]
                    }
                  },
                  "required": ["signature", "status"]
                }
              }
            }
          }
        }
      }
    }
  },
  "servers": [{ "url": "http://localhost:15888" }],
  "tags": [
    { "name": "/config", "description": "System configuration endpoints" },
    { "name": "/wallet", "description": "Wallet management endpoints" },
    { "name": "/tokens", "description": "Token management endpoints" },
    { "name": "/pools", "description": "Pool management endpoints" },
    { "name": "/chain/solana", "description": "Solana and SVM-based chain endpoints" },
    { "name": "/chain/ethereum", "description": "Ethereum and EVM-based chain endpoints" },
    { "name": "/connector/jupiter", "description": "Jupiter connector endpoints" },
    { "name": "/connector/meteora", "description": "Meteora connector endpoints" },
    { "name": "/connector/raydium", "description": "Raydium connector endpoints" },
    { "name": "/connector/uniswap", "description": "Uniswap connector endpoints" },
    { "name": "/connector/0x", "description": "0x connector endpoints" }
  ]
}
